ID,Date,URL,Content,Excerpt,Title,Description,Author,Keywords,Article Section
191650,2023-03-13 12:38:34,https://blog.knoldus.com/send-aws-cloudtrail-logs-to-the-s3-bucket/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">5</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Hello Readers!!! We are again back with a new exciting service of AWS i.e CloudTrail. This blog will show how to send <a href=""https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html"">AWS CloudTrail </a>logs to the S3 bucket. So, before moving to the S3 bucket let’s first discuss what is AWS CloudTrail and its uses.</p>



<h2><strong>AWS CloudTrail:</strong></h2>



<p>AWS CloudTrail is a service by which you can track changes to your AWS resources, including Amazon S3 buckets, Amazon EC2 instances, and AWS Identity and Access Management (IAM) users and roles. You can also use CloudTrail to help detect security incidents, troubleshoot operational issues, and analyze usage patterns.</p>



<p>It provides a record of all API calls made in your AWS account, including calls made through the AWS Management Console, AWS CLI, and AWS SDKs. CloudTrail logs include details such as the identity of the user or resource that made the call, the time of the call, and the parameters passed to the API.</p>



<h3><strong>How it works:</strong></h3>



<ul>
<li>AWS CloudTrail works by recording API calls made in your AWS account and storing them as log files in an S3 bucket or CloudWatch Logs log group.</li>
</ul>



<ul>
<li>Enable CloudTrail: First, you need to enable CloudTrail in your AWS account. This can be done through the AWS Management Console as well as by using the AWS CLI.</li>
</ul>



<ul>
<li>CloudTrail Records API Activity: Once enabled, CloudTrail will start recording API activity in your account. This includes API calls made through the AWS Management Console, AWS CLI, and AWS SDKs.</li>
</ul>



<ul>
<li>Store Log Files: CloudTrail stores the log files in an S3 bucket or CloudWatch Logs log group that you specify. You can use S3 lifecycle policies to manage the retention of log files and to automatically archive or delete them as needed.</li>
</ul>



<ul>
<li>Analyze and Visualize Log Data: You can use tools such as Amazon Athena, Amazon QuickSight, or third-party tools to analyze and visualize the CloudTrail log data. This can help you identify trends, detect security incidents, and troubleshoot operational issues.</li>



<li>Monitor and Alert: You can set up CloudTrail to send notifications or alerts when specific API activity or changes to resources occur in your account. This can help you detect potential security threats or unauthorized access.</li>
</ul>



<p>Overall, AWS CloudTrail provides a comprehensive audit trail of all API activity in your AWS account, enabling you to monitor, manage, and secure your AWS environment.</p>



<h2><strong>Sending AWS CloudTrail logs to the S3 Bucket:</strong></h2>



<p><strong>Step 1: </strong>Create an S3 Bucket for sending logs to it. If you haven&#8217;t already, create an S3 bucket where you want to store your CloudTrail logs.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh3.googleusercontent.com/jlaAkl80NKQeMmPmDqviU-vbBqdlLmbXYe91Ly9V0PXytEwx836KzK9W-oIA1_xcGq6OOI6f-YBZLkQxyhmPu2R6T2FE_behhPPxbgd5GO3bCjmG9ylcJbsFb8dGHJlOO9yryj4_2FNspb9aAXMB7jg"" alt=""create bucket""/></figure>



<p>The S3 bucket is created here. This bucket is empty and has no objects for now.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/qmtvJzZLZjJOQKiDb0PcQwuvCF3wnCRSmLNmxvsrNLJPKINhjXBslScmWDTnNmOvd5n3KdQPizpwdMGNtiGr_d2pFWEHO7d2p3Y2zfm7YfaiHcga_DWLBFxl5ccDZ-6Xzn29pKcUsJ8nBWBN_edE9Yw"" alt=""s3""/></figure>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/2o_jRIL7zsxnM4zZmhMCCWpVs4kVTE7wXgh776awqOmh3C04gQHgDTw8_PkeaPkU-uzbSbS8yS2f7Ptnb-pNyTdavwNipAKWsv9mpVYbo0ThmqEKrXgNCFYJzsxUspTLr_PEObDtZdwChx7_UHn251g"" alt=""bucket""/></figure>



<p><strong>Step 2:</strong> In AWS Management Console, Open the CloudTrail service. We will be able to see the account event history here as below. Event history shows you the last 90 days of events.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh3.googleusercontent.com/xvPigidDZZC-jCfUxb5jVIAZgpJ-gk9bEywFtOHEym3xKkI922H8DkzA6SXfP43hMxSLuQzTMhF3UFd5Y81D-ByM0fL8ClotErFVwPTtfRiLytRvwpSDV-uixCAHN0BvlGCXEWac7AbdtXVFbnpa4BM"" alt=""event history""/></figure>



<p>Create a trail here. For this move to <em>dashboard &gt; CloudTrail Insights &gt; Create a trail</em>.&nbsp;</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh6.googleusercontent.com/2nu7S8Uw8CkRC4labKeqK7nPJzbaMxd4Hcq09gfMWdfOzp9r1bEcm25ozJ6385d3Z6d2sUFzJlgxa_K18Rfpue1D7eM42osCNJP6U2ZmIG6c7tOSqA6fK0NA5S5vFyKFuExsaV0gc9hzLM17__vlTaM"" alt=""create trail""/></figure>



<p>Choose trail attributes. Give here a name to the trail.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/vfd1sgs50ITG1bU3lbhLNgSyyl9yyc_XDbxAEjH30ZS9t8dp0U-P02ed87Bc5CzrsaxCHCqvHp36VoA8hTzWl66XYgiuR1wUdkA0B_sI0VzGiE6zpho2GiGwxomifrb3fpAoEg5QxS9_r75l_y2tYqw"" alt=""trail attributes""/></figure>



<p>Now choose here storage location. We have already created a bucket so select here to use the existing s3 bucket and give the trail log bucket name.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/snrHaP8DxnrqWVs2OsoH_SDEn_Vf9z4MduxfzJKkb-YaE-srX4yOPQMjfVhwil-avKXH9FIL8Gvc3hjYZlC5tI40U3sW7qbFO6wO70PT7YFs3Xnez69xNyhFBZefnnL4TR3Zg8kpEZVm7kjk98aLrJw"" alt=""storage""/></figure>



<p>Click on Next.</p>



<p><strong>Step 3:</strong> Choose log events. So, select the events you want to see for all current and future resources in the AWS account.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/aoXGGtkVQBBAyXKiBXngcRcVyAf4k8Xt5VClElpWpHBt7JMJH7PM5pl2INGea02sY4sANAVGwe4pDuUecxF9LBpCqxaCpg_9aiOt1iCD5NjA-BgmgZH8-V9569hA6hUpiwLZiEp8Ugl8ede7nugUHaw"" alt=""log events""/></figure>



<p>Select the management events.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/QO-dUZy1d6Xxj8GSDaFCYjCdrr5ibYc307leCZvJEaOFpQlU-e4nmzhM9OG_i1SYRJAapVbqw6iXYRF5mbzGoWVTlRl6-EI4Jo_dj1KV0nbDjiJuDJSptYLRLPRLyQe4oV8n607gA_T8prRHbPzCu7E"" alt=""management events""/></figure>



<p>Choose data events. Data events show information about the resource operations performed on or within a resource.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh6.googleusercontent.com/M_dgY-qXGw111EbrRGbqJJm6mAn08oQprslEws5JE0K5uLVJZcqRNQPVVbmtHaRa9fDTN-4i0PI9Tsl6olOiHSp_44QZTZM1L4TqY6uKqIrTP2mPeqDzYUBktXRd358n2QGJhzAJg_jGsSQp0Xei0Iw"" alt=""data events""/></figure>



<p>So, Click on next. Review and click on Create trail. CloudTrail is created.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh3.googleusercontent.com/SEQXg0jOUy5IXnu88QIZg146x9GZMETmYeO8tNJpakYjOnhSXVPBF9l5ioddsNNNuHeWo0rJI9kmkhGKBd1d-_Cye8784H1DwaiK71HZnrtPC1rCX1jg-bOHvH41Tl7F8opvLA8NAhYxU1HJ44R9Kx8"" alt=""create""/></figure>



<p>Now, we are all done. Once you&#8217;ve configured your CloudTrail Trail to send logs to your S3 bucket, you can verify that logs are being delivered by checking the S3 bucket for new log files. We should now able to see some objects inside our S3 bucket. We can see one object got created itself by the name of AWSLogs/. <img decoding=""async"" src=""https://lh4.googleusercontent.com/HSVSvWRdUWFTrKf8R4nbbKaCu3cuwYv0jv5lNNyefP-hO5SOQEu2uK0ihbNpJBhfQCRlKvVdvsqanr3clYxYoHY7YxV-bULPiQpUyCnNzSSICus6KZe-esTjc-nzhgAoMLM7KG1v-wUlscYcXPXCmz0"" width=""624"" height=""189""></p>



<p>Inside this we can see objects.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/oGMimtD1X13qzYkchMBMFg1hk5wYDQ78AFkTNDWW_4EGeUPDMCkUE78O7EKcrbJ9v1uXwCluEikXxEQpmTaUbp-h7eqolPSmcom1PkqL8rnknfrmY6onncCVHzJIZp-te7fC9walkXhLtCCXyYAF0Wc"" alt=""objects""/></figure>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/iwa-w9Mv82oCaJVk99JRW5MSubuAC1sxRmyhIoD71pQsb2_NAkv4uvgx_5uwGMPPIaVkvJJPpCK-jpFyUUFE_iQc2J_nNe10Zpo1OQ4_ghTPWJO6yHx1uEiNsb6dTaTsY-ipVZP0TXb8lAG8tUDTjoI"" alt=""objects""/></figure>



<p>Now, all the AWS CloudTrail logs can be seen in the S3 bucket. With your CloudTrail logs stored in S3, you can use tools such as Amazon Athena or Amazon QuickSight to analyze and visualize the log data. You can also use third-party tools or create custom scripts to process and analyze the log data.</p>



<p>By sending CloudTrail logs to an S3 bucket, you can store your log data in a durable, scalable, and cost-effective manner, and gain insights into your AWS account activity.</p>



<h2><strong>Conclusion:</strong></h2>



<p>Thank you for sticking to the end. In this blog, we have learned how we can send AWS CloudTrail logs to the S3 bucket. So, this is really very useful. I hope this blog helped you somewhere. Please share if you liked this blog. Kindly reach out to me for any related queries.</p>



<p><strong><em>HAPPY LEARNING!</em></strong>&nbsp;</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">5</span> <span class=""rt-label rt-postfix"">minutes</span></span> Hello Readers!!! We are again back with a new exciting service of AWS i.e CloudTrail. This blog will show how to send AWS CloudTrail logs to the S3 bucket. So, before moving to the S3 bucket let’s first discuss what is AWS CloudTrail and its uses. AWS CloudTrail: AWS CloudTrail is a service by which you can track changes to your AWS resources, including Amazon <a href=""https://blog.knoldus.com/send-aws-cloudtrail-logs-to-the-s3-bucket/"" class=""more-link"">Continue Reading</a></p>
",Sending AWS CloudTrail logs to the S3 Bucket - Knoldus Blogs,Hello Readers!!! We are again back with a new exciting service of AWS. This blog will show how to send AWS CloudTrail logs to S3 bucket.,Naincy Kumari,"[['Amazon S3', 'AWS', 'AWS CloudTrail', 'AWS Services']]","[['AWS', 'AWS Services', 'Studio-DevOps']]"
191653,2023-03-13 12:37:32,https://blog.knoldus.com/sending-aws-cloudtrail-events-to-cloudwatch-logs/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Hello Readers!! This blog will show how to send AWS CloudTrail events to CloudWatch logs. As we all know<a href=""https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-user-guide.html""> AWS CloudTrail </a>records all API calls made to AWS services within an AWS account, including the identity of the user or service making the request, the time of the request, and the parameters of the request.&nbsp;</p>



<p>And<a href=""https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html""> AWS CloudWatch </a>is a monitoring service provided by Amazon Web Services (AWS) that enables you to monitor and collect metrics, collect and monitor log files, and set alarms. CloudWatch provides data and actionable insights to monitor applications, infrastructure, and services that run on AWS or on-premises environments.</p>



<p><strong><em>Let&#8217;s start!!!</em></strong></p>



<h2><strong>Sending AWS CloudTrail events to CloudWatch Logs&nbsp;</strong></h2>



<p>To send AWS CloudTrail events to CloudWatch Logs, you can use the CloudTrail service&#8217;s built-in integration with CloudWatch Logs. This integration allows you to stream CloudTrail events to a CloudWatch Logs log group in near real-time.</p>



<p>Following below are the steps to set up the integration:</p>



<p><strong>Step 1: </strong>Open the CloudTrail console in the AWS Management Console. Create a trail for which you want to send events to CloudWatch Logs.</p>



<p>Move to Dashboard &gt; CloudTrail &gt; Create trail</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh3.googleusercontent.com/UCSpwPcdHGNTWUdVs0zRof0StqQscsXqnYQ2oVTyhXJxS9i1xMhgW2DieHFKMX-Ch1dxfKHMcYKHfCj88AMEih4VCkxTvVrsqN0WapywFZLu5QQzyGUJv3-wSGRNzlfn6Ru6iFvuakyuDsdwKLRUX84"" alt=""create""/></figure>



<p>Give it a name.&nbsp;</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/veEuLN4Y88i7ysP1_nBhEa2n8bjF1ZgDtcO5QNV2eTg0gUlj-1yp17Tyq1qRDxg6FoogeNEHwfegsg58ZtoTUBl06dnWwkvFe-5xv2DTCYWOglnsJQ84uh8qWkGoIeVuAPLQNQboGEnbv9FhbVbXl7E"" alt=""trail""/></figure>



<p>For storage location choose according to you.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh6.googleusercontent.com/foyOL9FndzA14Y6IbSvPTVg177ZIHl-BHC8vL1X2O2ZcVMv5R8BGe6ydMO4LMfsPqsvvtJd09ltCB_HRTOpYkhZtDPWYxWD1WCoePHO-Hv_mvIHkddWnK3q49-iGXhwQRMJRNyZpkTIUVo_tfGnouwE"" alt=""storage""/></figure>



<p><strong>Step 3:</strong> Under the &#8220;CloudWatch Logs&#8221; section, select the option to &#8220;Configure&#8221; CloudWatch Logs. Choose an existing CloudWatch Logs log group or create a new one. Give here all the details.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/dFJxPv_VBCIwB3sZ-BRWLOlJfYapT_pcfNnVnsbL5TMP_nICyZtZxJ20VN1RVWpV56FCB9CgfzZhFHFcMF0uCspaFBHkul0fW8b98sgPAn9V_Q85zvGohilcokWcqBoPdKLAVZRZVqQXtfKPOiKZWsY"" alt=""cloudwatch""/></figure>



<p>Choose the log stream name format and the IAM role that CloudTrail will use to access CloudWatch Logs.</p>



<p>Click &#8220;Next&#8221;.</p>



<p>Choose log events.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/3lrfKzUF1zPd3k5T7rcVVgQpMvvxwjwBo8dG-RoTYNoIn-vopyaToPd0Ma48jyuH9k2vHq-_0IterIjKMLIplJMrDwR_bYsxsfuM85MmOZrklsF42DfCQpJcq-H1qjGwcea1vW6c1yrmdWXSj0yg0gM"" alt=""log events""/></figure>



<p>Select Management events.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh6.googleusercontent.com/bCADqIz4Cy3zmLjEusNvr218ZUEcbLx42eeCp4zz1_mBbUlBJI3w1VeM4YamE0WBRKeKNHtlU3J500Qlqan2cOgbG5R1YCrbrY0zFjjtL63cfUC7BZuJ8RNNWpktXxFywcRDXoNuGRJ7Fa54a--wW8A"" alt=""events""/></figure>



<p>Click on Next. Review and Create. It got created.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/BKY5PHrqGOdZTPMyY_WDyLkTHd3UJ0n45qjv9iSd_DBxCYVQ05vSWhvP6pL21jaQPM76Kk4Z6uAk-Y65stJLfqMEtDhdoK8_WKeajP5TZlsr1BJ-bruImZjrSgbPRKrw84g4xJuCodCfFHnglIVOAEw"" alt=""trail""/></figure>



<p><strong>Step 4:</strong> Once the integration is set up, CloudTrail events will be sent to the specified CloudWatch Logs log group in near real-time.&nbsp;</p>



<p>As you can see below CloudWatch log group got created itself.&nbsp;</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh5.googleusercontent.com/BfvSS82SgZf07c7NUBq4cqqOsY27qIYlcYFH1I6v9oF5nlykBKs1p-pkAA2dBbeUqQfFRvAMOd5azEtXa_cURpXEbz70sCq5SwhVWjsPlarBBfUlhRiiYSFs21n_FZRV6cDnCRq2xV3edKn7Ze7gCBU"" alt=""log group""/></figure>



<p>Inside this, we will get all the log streams.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/WyqW6KsCgp2uJ7oj7SLaninnIjZoydQNSnVA1GGaz9lb-A4Cf6a6DYOs4SD2c1RxvRt-L3HcClinYp9NGMukYPgTaPLW7XU41CIfqTwZpEgXqK_KXCWbau5sJ1gvT6AsaRMn-rwHO7B7NX3uzt-bbpg"" alt=""log group""/></figure>



<p>You can then use CloudWatch Logs to search, filter, and analyze the log data, as well as set up alarms and notifications based on specific log events.</p>



<p>Overall, sending CloudTrail events to CloudWatch Logs can help you gain more visibility into the activity in your AWS environment, improve your security posture, and enable more efficient troubleshooting and analysis of issues.</p>



<h2><strong>Conclusion:</strong></h2>



<p>Thank you for sticking to the end. In this blog, we have learned how we can send AWS CloudTrail events to CloudWatch logs. This is really very useful. I hope this blog helped you somewhere. Please share if you liked this blog. Kindly reach out to me for any related queries.</p>



<p><strong><em>HAPPY LEARNING!</em></strong>&nbsp;</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Hello Readers!! This blog will show how to send AWS CloudTrail events to CloudWatch logs. As we all know AWS CloudTrail records all API calls made to AWS services within an AWS account, including the identity of the user or service making the request, the time of the request, and the parameters of the request.&nbsp; And AWS CloudWatch is a monitoring service provided by Amazon <a href=""https://blog.knoldus.com/sending-aws-cloudtrail-events-to-cloudwatch-logs/"" class=""more-link"">Continue Reading</a></p>
",Sending AWS CloudTrail events to CloudWatch Logs&nbsp; - Knoldus Blogs,Hello Readers!! This blog will show how to send AWS CloudTrail events to CloudWatch logs. As we all know AWS CloudTrail records all API,Naincy Kumari,"[['AWS', 'AWS CloudTrail', 'AWS cloudwatch', 'AWS Services', 'logs']]","[['AWS', 'AWS Services', 'Studio-DevOps']]"
180379,2023-03-12 22:53:28,https://blog.knoldus.com/spring-webflux-error-handling/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/DzhW3vbP/Untitled-Diagram-drawio.png?resize=640%2C323&#038;ssl=1"" alt="""" width=""640"" height=""323"" data-recalc-dims=""1"" /></figure>



<h3>Introduction</h3>



<p id=""3884"">In this Blog, we’ll take a look at the Spring WebFlux Error Handling using <strong>@ControllerAdvice</strong>. While calling the services/micro-services anything could go wrong and result in 500 “Internal Server Errors<strong>”</strong> as shown below error:</p>



<pre class=""wp-block-code has-black-color has-text-color has-background"" style=""background:linear-gradient(11deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%)""><code>{
    ""timestamp"": ""2022-09-09T03:42:10.982+00:00"",

    ""path"": ""/employee/all"",

    ""status"": 500,

    ""error"": ""Internal Server Error"",

    ""requestId"": ""3101b004-1""
}</code></pre>



<p id=""eb4a"">Usually, error messages like this will not be handled properly and would be propagated to all the downstream services which might impact the user experience. In some cases, applications might want to use application-specific error codes to convey appropriate messages to the calling service.</p>



<h3 id=""d693"">pom.xml</h3>



<pre class=""wp-block-code has-black-color has-text-color has-background"" style=""background:linear-gradient(79deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%)""><code><em>&lt;?</em><strong>xml version=""1.0"" encoding=""UTF-8""</strong><em>?&gt;</em>
<em>
</em>&lt;<strong>project xmlns=""http://maven.apache.org/POM/4.0.0"" </strong>

<strong>xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""</strong>
<strong>
   xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 </strong>

<strong>https://maven.apache.org/xsd/maven-4.0.0.xsd""</strong>&gt;

   &lt;<strong>modelVersion</strong>&gt;4.0.0&lt;/<strong>modelVersion</strong>&gt;

   &lt;<strong>parent</strong>&gt;

      &lt;<strong>groupId</strong>&gt;org.springframework.boot&lt;/<strong>groupId</strong>&gt;

      &lt;<strong>artifactId</strong>&gt;spring-boot-starter-parent&lt;/<strong>artifactId</strong>&gt;

      &lt;<strong>version</strong>&gt;2.6.3&lt;/<strong>version</strong>&gt;

      &lt;<strong>relativePath</strong>/&gt; <em>&lt;!-- lookup parent from repository --&gt;</em>
<em>
   </em>&lt;/<strong>parent</strong>&gt;

   &lt;<strong>groupId</strong>&gt;com.example&lt;/<strong>groupId</strong>&gt;

   &lt;<strong>artifactId</strong>&gt;error-handling&lt;/<strong>artifactId</strong>&gt;

   &lt;<strong>version</strong>&gt;0.0.1-SNAPSHOT&lt;/<strong>version</strong>&gt;

   &lt;<strong>name</strong>&gt;error-handling&lt;/<strong>name</strong>&gt;

   &lt;<strong>description</strong>&gt;Demo project for Spring Boot&lt;/<strong>description</strong>&gt;

   &lt;<strong>properties</strong>&gt;

      &lt;<strong>java.version</strong>&gt;11&lt;/<strong>java.version</strong>&gt;

   &lt;/<strong>properties</strong>&gt;

   &lt;<strong>dependencies</strong>&gt;

      &lt;<strong>dependency</strong>&gt;

         &lt;<strong>groupId</strong>&gt;org.springframework.boot&lt;/<strong>groupId</strong>&gt;

         &lt;<strong>artifactId</strong>&gt;spring-boot-starter-webflux&lt;/<strong>artifactId</strong>&gt;

      &lt;/<strong>dependency</strong>&gt;

      &lt;<strong>dependency</strong>&gt;

         &lt;<strong>groupId</strong>&gt;org.projectlombok&lt;/<strong>groupId</strong>&gt;

         &lt;<strong>artifactId</strong>&gt;lombok&lt;/<strong>artifactId</strong>&gt;

         &lt;<strong>optional</strong>&gt;true&lt;/<strong>optional</strong>&gt;

      &lt;/<strong>dependency</strong>&gt;

      &lt;<strong>dependency</strong>&gt;

         &lt;<strong>groupId</strong>&gt;org.springframework.boot&lt;/<strong>groupId</strong>&gt;

         &lt;<strong>artifactId</strong>&gt;spring-boot-starter-test&lt;/<strong>artifactId</strong>&gt;

         &lt;<strong>scope</strong>&gt;test&lt;/<strong>scope</strong>&gt;

      &lt;/<strong>dependency</strong>&gt;

      &lt;<strong>dependency</strong>&gt;

         &lt;<strong>groupId</strong>&gt;io.projectreactor&lt;/<strong>groupId</strong>&gt;

         &lt;<strong>artifactId</strong>&gt;reactor-test&lt;/<strong>artifactId</strong>&gt;

         &lt;<strong>scope</strong>&gt;test&lt;/<strong>scope</strong>&gt;

      &lt;/<strong>dependency</strong>&gt;

   &lt;/<strong>dependencies</strong>&gt;

   &lt;<strong>build</strong>&gt;

      &lt;<strong>plugins</strong>&gt;

         &lt;<strong>plugin</strong>&gt;

            &lt;<strong>groupId</strong>&gt;org.springframework.boot&lt;/<strong>groupId</strong>&gt;

            &lt;<strong>artifactId</strong>&gt;spring-boot-maven-plugin&lt;/<strong>artifactId</strong>&gt;

            &lt;<strong>configuration</strong>&gt;

               &lt;<strong>excludes</strong>&gt;

                  &lt;<strong>exclude</strong>&gt;

                     &lt;<strong>groupId</strong>&gt;org.projectlombok&lt;/<strong>groupId</strong>&gt;

                     &lt;<strong>artifactId</strong>&gt;lombok&lt;/<strong>artifactId</strong>&gt;

                  &lt;/<strong>exclude</strong>&gt;

               &lt;/<strong>excludes</strong>&gt;

            &lt;/<strong>configuration</strong>&gt;

         &lt;/<strong>plugin</strong>&gt;

      &lt;/<strong>plugins</strong>&gt;

   &lt;/<strong>build</strong>&gt;

&lt;/<strong>project</strong>&gt;</code></pre>



<h3><strong>DTO</strong></h3>



<p>First I create a simple DTO for employees. We are interested only in these 3 attributes of employees for now.</p>



<p id=""b4fd"">Employee.java</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/m2Mfvk0G/Screenshot-from-2022-09-10-05-37-04.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p>Now, I create another class that can respond in case of error.&nbsp;&nbsp;<em><strong>errorCode</strong></em>&nbsp;can be some app-specific error code and some appropriate error message.</p>



<p id=""d952"">ErrorResponse.java</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/0jDWBMrW/Screenshot-from-2022-09-10-05-42-48.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p>I also create another exception class as shown here for the service layer to throw an exception when the employee is not found for the given id.</p>



<p id=""2c98"">EmployeeNotFoundException.java</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/qq4MNnfy/Screenshot-from-2022-09-10-05-26-52.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p>Now, Finally, I create a service layer with these 2 methods.</p>



<p id=""996f"">EmployeeService.java</p>



<pre class=""wp-block-code has-black-color has-text-color has-background"" style=""background:linear-gradient(75deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%)""><code><strong>import </strong>com.example.errorhandling.dto.Employee;

<strong>import </strong>com.example.errorhandling.exception.EmployeeNotFoundException;

<strong>import </strong>org.springframework.stereotype.Service;

<strong>import </strong>reactor.core.publisher.Flux;

<strong>import </strong>reactor.core.publisher.Mono;

<strong>import </strong>java.util.Map;

@Service

<strong>public class </strong>EmployeeService {

    <strong>private static final </strong>Map&lt;Integer, Employee&gt; <strong><em>DATA </em></strong>= Map.<em>of</em>(

            1, <strong>new </strong>Employee(1, <strong>""DEEPAK""</strong>, <strong>""KUMAR""</strong>),

            2, <strong>new </strong>Employee(2, <strong>""ASHIF""</strong>, <strong>""ALI""</strong>),

            3, <strong>new </strong>Employee(3, <strong>""KRISHNA""</strong>, <strong>""JAISHWAL""</strong>),

            4, <strong>new </strong>Employee(4, <strong>""HARSH""</strong>, <strong>""GUPTA""</strong>),

            5, <strong>new </strong>Employee(5, <strong>""ANKIT""</strong>, <strong>""MOGHA""</strong>)
    );

    <strong>public </strong>Flux&lt;Employee&gt; getAllEmployees() {

        <strong>return </strong>Flux.<em>fromIterable</em>(<strong><em>DATA</em></strong>.values())

                <strong>.doFirst(() -&gt; throwRandomError(true));</strong>
    }

    <strong>private void </strong>throwRandomError(<strong>boolean </strong>flag) {

        <strong>if </strong>(flag) {
            <strong>throw new </strong>RuntimeException(<strong>""Some Errors!!""</strong>);
        }
    }

    <strong>public </strong>Mono&lt;Employee&gt; findEmployeeById(<strong>int </strong>id) {

        <strong>return </strong>Mono.<em>just</em>(id)

                .filter(e -&gt; <strong><em>DATA</em></strong>.containsKey(e))

                .map(e -&gt; <strong><em>DATA</em></strong>.get(e))

                .switchIfEmpty(Mono.<em>error</em>(() -&gt; <strong>new </strong>

EmployeeNotFoundException(id)));

    }
}</code></pre>



<p id=""a6aa"">To produce an error, I set the value to true, so that we can see the error, and make it false to be able to see the endpoints working.</p>



<pre class=""wp-block-code has-black-color has-text-color has-background"" style=""background:linear-gradient(288deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%)""><code><strong>doFirst(() -&gt; throwRandomError(true));</strong></code></pre>



<p>If I pass the below request, I received the appropriate response instead of directly propagating a 500 Internal Server Error.</p>



<pre class=""wp-block-code""><code>http:&#47;&#47;localhost:8080/employee/28</code></pre>



<p>This error delivered a more meaningful error message. So the calling service using this error code might take appropriate action.</p>



<pre class=""wp-block-preformatted has-black-color has-pale-ocean-gradient-background has-text-color has-background""><code>{
   ""errorCode"":101,</code>
<code>
   ""message"":""Employee id 28 is not found""</code>
<code>
</code>}</pre>



<p>Similarly, I used the below endpoint (after some time), then the below response get.</p>



<pre class=""wp-block-code""><code>http:&#47;&#47;localhost:8080/employee/all</code></pre>



<pre class=""wp-block-code has-black-color has-pale-ocean-gradient-background has-text-color has-background""><code>{
   ""errorCode"":100,

   ""message"":""Unable to fetch employees""
}</code></pre>



<h2 id=""_conclusion"">Conclusion </h2>



<p>In this Blog, we learn all about &#8220;The error-handling-spring-boot-starter&#8221; library is fully ready for Spring WebFlux.</p>



<h2>References</h2>



<p><a href=""https://blog.softwaremill.com/spring-webflux-and-domain-exceptions-10ae2096b159"">https://blog.softwaremill.com/spring-webflux-and-domain-exceptions-10ae2096b159</a></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction In this Blog, we’ll take a look at the Spring WebFlux Error Handling using @ControllerAdvice. While calling the services/micro-services anything could go wrong and result in 500 “Internal Server Errors” as shown below error: Usually, error messages like this will not be handled properly and would be propagated to all the downstream services which might impact the user experience. In some cases, applications might want to use <a href=""https://blog.knoldus.com/spring-webflux-error-handling/"" class=""more-link"">Continue Reading</a></p>
",Spring WebFlux — Error Handling - Knoldus Blogs,"In this Blog, we’ll take a look at the Spring WebFlux Error Handling using @ControllerAdvice While calling the services/micro-services.",Shashikant Tanti,[['Error Handling']],"[['Java', 'Spring WebFlux']]"
191298,2023-03-10 13:06:09,https://blog.knoldus.com/introduction-to-reactive-programming/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span><div class=""wp-block-image"">
<figure class=""aligncenter size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/9z5gTkfR/Screenshot-from-2023-03-05-20-42-41.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure></div>


<h2>Overview</h2>



<p>In recent years, Reactive programming has gained popularity. Now it is frequently utilized programming paradigm in the creation of cutting-edge, responsive, and scalable systems. Based on the concepts of asynchronous data streams, reactive programming offers a method for handling events and data flows non-blocking and responsively. In this blog post, we will provide an introduction to Reactive Programming and explore its key concepts and benefits.</p>



<h2>What is Reactive Programming?</h2>



<p>A programming paradigm called reactive programming emphasizes the reactive transmission of data changes and events. Data is seen as a stream of events in reactive programming, and programmers create code that responds to changes in the data stream as they happen. Observables, which are objects that emit a stream of data over time, are the foundation of the notion of reactive programming.</p>



<p>Reactive programming&#8217;s key benefit is that it offers a technique to handle complex and dynamic data flows in a responsive and scalable way. Applications that require real-time data processing, such as web apps, IoT devices, and streaming services, are particularly well suited for reactive programming. Reactive programming&#8217;s key benefit is that it offers a technique to handle complex and dynamic data flows in a responsive and scalable way. Applications that require real-time data processing, such as web apps, IoT devices, and streaming services, are particularly well suited for reactive programming.</p>



<h2>Key Concepts of Reactive Programming</h2>



<p>There are several key concepts that are central to Reactive Programming:</p>



<ol>
<li><strong>Observables:</strong> Observables are things that continuously emit a stream of data. Any number of events, such as error and completion events, can be produced by an observable.</li>



<li><strong>Observers:</strong> Observers are objects that subscribe to an Observable and get alerts whenever new data is emitted from the Observable. Errors and completion events can also be handled by observers.</li>



<li><strong>Operators:</strong> Observables emit data, which is transformed, filtered, or combined by operators. Operators are used to manipulate the data released by Observables and to build more intricate data flows.</li>



<li><strong>Schedulers:</strong> In reactive programming, schedulers are used to manage the parallelism and timeliness of data streams. Schedulers can be used to enhance performance and resource usage since they let developers control how and when data streams are processed.</li>
</ol>



<h2>Benefits of Reactive Programming</h2>



<p>Reactive Programming offers several benefits over traditional programming paradigms:</p>



<ol>
<li><strong>Responsiveness:</strong> Applications can react rapidly and effectively to changes in data streams thanks to reactive programming. This is especially crucial for real-time data processing applications like web applications, IoT devices, and streaming services.</li>



<li><strong>Scalability:</strong> A scalable and effective method of managing intricate and dynamic data flows is provided by reactive programming. Applications that can manage enormous volumes of data and scale effectively as the data grows can be created using reactive programming.</li>



<li><strong>Resilience:</strong> A reactive and non-blocking method of addressing mistakes and failures is provided by reactive programming. Applications can be created using reactive programming that is resilient to mistakes and has a short recovery time after failures.</li>



<li><strong>Modularity:</strong> Application builders can create modular and composable systems using reactive programming. By encapsulating data flows and logic in reusable and assemblable components, reactive programming enables the creation of more intricate programs.</li>
</ol>



<h2>Data flow as a driven system</h2>


<div class=""wp-block-image"">
<figure class=""aligncenter size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/KYPLppZh/dataFlow.jpg?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/><figcaption class=""wp-element-caption"">Data Flow as a driven system</figcaption></figure></div>


<p>If we talk about this diagram this is a typical and traditional approach. Basically, the client sends a request to the application then the request goes to the database and processes the data. Finally, it returns a response back to the client. But what if a few records are inserted or modified in the middle. As a result, the client will have no information about those records. To get that updated information again we need to do a separate restAPI call. Now let us talk about how it works on reactive programming. Now whoever subscribes, can stream the data. If there are any changes done in the database then immediately it will fire or publish an event “there is a new data found”.&nbsp;</p>



<p>In this case, if you observe the client is a subscriber and the database driver is a publisher. If any changes will happen to the database will publish an event. As my client is consuming the application, he can easily stream the data. And also in this scenario, the connection will always be in an open state. That is the reason why we can perform the publisher and subscriber operation.&nbsp;</p>



<p>We can consider any steaming platform that works in a reactive programming manner. Therefore, the best example we can consider is cricket live score. We have seen the cricket live score right. If any update happened in the application, we can see the current score with the updated details. So this is how data is transferred as an event on the publisher and subscriber model.</p>



<h2>Conclusion</h2>



<p>In conclusion, in this blog, we have learned about the basics of Reactive Programming. I will be covering more topics on Reactive Programming in my future blogs, stay connected. Happy learning&nbsp;🙂</p>



<p>For more, you can refer to the Liquibase documentation: <a href=""https://projectreactor.io/docs/core/release/reference/#intro-reactive"">https://projectreactor.io/docs/core/release/reference/#intro-reactive</a></p>



<p>For a more technical blog, you can refer to the&nbsp;<strong>Knoldus&nbsp;</strong>blog:&nbsp;<a href=""https://blog.knoldus.com/"">https://blog.knoldus.com/</a></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Overview In recent years, Reactive programming has gained popularity. Now it is frequently utilized programming paradigm in the creation of cutting-edge, responsive, and scalable systems. Based on the concepts of asynchronous data streams, reactive programming offers a method for handling events and data flows non-blocking and responsively. In this blog post, we will provide an introduction to Reactive Programming and explore its key concepts and <a href=""https://blog.knoldus.com/introduction-to-reactive-programming/"" class=""more-link"">Continue Reading</a></p>
",Introduction to Reactive Programming - Knoldus Blogs,"In recent years, Reactive programming has gained popularity and is now a frequently utilized programming paradigm in the creation of cutting-edge, responsive, and scalable systems.",Shivam Roy,"[['java', 'Reactive Programming', 'Tech blogs']]",[['Java']]
180648,2023-03-09 22:33:40,https://blog.knoldus.com/swagger-with-spring-rest-api/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">5</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large is-style-rounded""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/gkxdFsLc/Screenshot-from-2022-09-13-22-43-14.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<h2>Swagger with Spring REST API</h2>



<p>REST is the ultimate way to expose web services nowadays. But, how do state to clients and how to use a REST API? There’s no real standard or at a minimum de facto standard to expose a REST contract. Many API spots human-readable documentation, which is currently edited and thus hard to keep perfectly synchronized with the API. Another process is to generate the documentation from the code itself, and this is what this article covers, by using Swagger on top of Spring MVC.</p>



<h2>Swagger</h2>



<p><a href=""https://developers.helloreverb.com/swagger/"" target=""_blank"" rel=""noreferrer noopener"">Swagger</a>&nbsp;is a specification for documenting REST API. It identifies the format (URL, method, and representation) to describe REST web services. It delivers tools to generate/compute the documentation from application code also.<br>What can be its mean? As an application developer, you write web services and operate your preferred framework, Swagger scans your code and exposes the documentation on some URL. Any client can absorb this URL (which comes as XML or JSON documents) and learn how to use your REST web services: which HTTP technique to call on which URL, which input documents to deliver, which status code to expect, etc.<br>We’re going to see how to use Swagger on top of Spring MVC, but remember Swagger is a specification and supports a wide range of frameworks.</p>



<h2>The controller</h2>



<p>The controller holds the basic CRUD operations, it utilizes the Spring MVC API:</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>@RestController

@RequestMapping(""/user"")

@Api(value = ""api/v1"",tags = ""USER REST CONTROLLER"")

public class UserController {

    ConcurrentHashMap&lt;Integer, User> users = new ConcurrentHashMap&lt;>();

    @GetMapping(""/{id}"")

    public User getUser(@PathVariable int id){

        return users.get(id);
    }

    @GetMapping(""/getAllUser"")

    public List&lt;User> getAllUser(){

        return  new ArrayList&lt;User>(users.values());
    }

    @ApiResponses(value = {

            @ApiResponse(code = 200,message = ""OK""),

            @ApiResponse(code = 401,message = ""Unauthorized User""),

            @ApiResponse(code = 403,message = ""Forbidden User"")
    })

    @PostMapping(""/addUser"")

    public User addUser(@RequestBody User user){

        users.put(user.getId(), user);

        return user;
    }
}</code></pre>



<p>I create the controller as simply as possible, the point isn’t to have a perfect, <a href=""https://www.thesaurus.com/browse/indestructible"">indestructible</a> controller, but rather to illustrate the use of Swagger.</p>



<h2>Swagger configuration</h2>



<p>A nice and active project on GitHub provides Swagger support for Spring MVC REST API. The XML configuration is straightforward:</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>@Configuration

public class SpringFoxConfiguration {

    @Bean

    public Docket api(){

        return new Docket(DocumentationType.SWAGGER_2)

                .apiInfo(apiInfo())

                .select()

               // .apis(RequestHandlerSelectors.any())
                  
                  .apis(Predicate.not(RequestHandlerSelectors

                  .basePackage(""org.springframework.boot"")))

                .build();

    }

    private ApiInfo apiInfo(){

        return new ApiInfoBuilder()

                .title(""AIP FOR SWAGGER"")

                .description(""THIS IS MY REST API"")

                .version(""0.0.1-SNAPSHOT"")

                .build();
    }
}
</code></pre>



<p>&nbsp;<br>Swagger Spring MVC requires a few properties from a property file:</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>spring.mvc.pathmatch.matching-strategy = ANT_PATH_MATCHER

server.port = 8080</code></pre>



<p>We’ll see shortly how Swagger Spring MVC utilizes these 2 properties.<br>What’s occurring under the hood? Swagger Spring MVC scans the Spring MVC controllers on initiate and registers a documentation controller. It exposes the operations the controllers permit. This document follows the Swagger specification: any client that acknowledges this specification can use the API. The good news is the documentation is established on the code itself: any change to the code is reflected on the documentation, no need to maintain an external document.<br>Swagger Spring MVC uses Spring MVC annotations to figure out the documentation, but it also understands Swagger annotations. Let’s put on the&nbsp;<code>@Api</code>&nbsp;annotation on the controller:</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>@RestController

@RequestMapping(""/user"")

@Api(value = ""api/v1"",tags = ""USER REST CONTROLLER"")

public class UserController { ... }</code></pre>



<p>It’s time now to discover the documentation.</p>



<h2>Swagger documentation with REST API</h2>



<p>Here is the documentation endpoint  on the&nbsp;<code>/api-docs</code>&nbsp;URL, if we hit this URL and ask for JSON content, we’ll get the following snapshot:-</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>{

""swagger"":""2.0"",

""info"":{""description"":""THIS IS MY REST API""

""version"":""0.0.1-SNAPSHOT"",

""title"":""API FOR SWAGGER""},

""host"":""localhost:8080"",

""basePath"":""/"",

""tags"":&#91;{""name"":""basic-error-controller"",

""description"":""Basic Error Controller""

       }

    ]
}</code></pre>



<p><br>Remember that, we pitch on the 2 properties we set up previously, the version of our API and the base path of the API. Both will appear on each page of our documentation.<br>If we want to work on the users, we just have to follow the link to find out more about the exposed operations on this resource. Hence, let’s hit&nbsp;<code>/api-docs/</code>users, here is an excerpt of the result:-</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>{

""swagger"":""2.0"",

""info"":{""description"":""THIS IS MY REST API"",

""version"":""0.0.1-SNAPSHOT"",

""title"":""API FOR SWAGGER""},

""host"":""localhost:8080"",

""basePath"":""/"",

""tags"":&#91;{""name"":""user-controller"",

""description"":""User Controller""}],

""paths"":{""/user/addUser"":{""post"":{""tags"":&#91;""user-controller""],

""summary"":""addUser"",

""operationId"":""addUserUsingPOST"",

""consumes"":&#91;""application/json""],""produces"":&#91;""*/*""],

""parameters"":

&#91; 
   {        

""in"":""body"",

""name"":""user"",

""description"":

""user"",

""required"":true,

""schema"":properties"":

{

""id"":

    {

""type"":""integer"",

""format"":""int32""},

""name"":{""type"":""string""},

""phone"":{""type"":""integer"",

""format"":""int64""}

            },

""title"":""User""

       }

    }

}</code></pre>



<p>Here, there are two parts to this documentation:- That is the operations and the models. A client can send a GET on the&nbsp;<code>/user</code>&nbsp;URL to select the users. This can be an example of an operation. We can see this operation returns a collection of users. A client can pursue more about this model in the&nbsp;<code>models</code>&nbsp;segment. Note the&nbsp;<code>User</code>&nbsp;model, which is used by the GET and POST operations (not shown above). All of these operations are scanned from the controller.<br>As much, so good: I write a controller and get its documentation for free. But this is only the start: let’s see now how to ruin this documentation, first from a programmatic client, and second from a neat user interface.</p>



<p>&nbsp;<br>This time, refer back to the next JSON document to acknowledge what the client is doing. It basically searches the path of an operation whose nickname is&nbsp;<code>sort</code>&nbsp;and ensures this operation is exposed on a GET operation. Once it has the path, it delivers the request and gets the following rep from one, of the users:</p>



<pre class=""wp-block-preformatted has-black-color has-blush-light-purple-gradient-background has-text-color has-background"">[
    {
        ""id"": 1,
        ""firstname"": ""Deepak"",
        ""lastname"": ""Kumar""
    },
    {
        ""id"": 2,
        ""firstname"": ""Krishna"",
        ""lastname"": ""Vasudev""
    },
    {
        ""id"": 3,
        ""firstname"": ""Versha"",
        ""lastname"": ""Limbachia""
    },
    {
        ""id"": 4,
        ""firstname"": ""Harsha"",
        ""lastname"": ""Bhogle""
    }
]</pre>



<p>It is not that much great? With only the documentation URL as an entry point and a little similar idea about what it wants to do, the client can find a suitable request to make. If we redesign the controller, the client shouldn’t break, as long as it follows the documentation. That is nice decoupling.</p>



<h3>Swagger UI with REST API</h3>



<p>Have you ever used written-by-hand web service documentation which isn’t up-to-date? I believe we all are intimate with that. The API developers are busy writing the APIs, they don’t have more time or forget to upgrade the documentation, and the API client developers are trying to figure out how to operate the API, but the documentation is snap or obsolete. No one is happy with it.<br>Imagine now the developers that write client applications can consult a beautiful UI that tells them how to use the API. The UI even identify them with what kind of documents the API expects. This UI exists and is called&nbsp;Swagger UI:<br><a href=""https://i0.wp.com/www.openjill.org/openjill/pub/uploads/2015/06/swagger_ui_api.png""></a><br>Swagger UI just anticipates a URL that leads to Swagger-compliant documentation. It then uses the documentation to present all the operations.<br>Swagger UI also audits the models, so finding out about the structure of the JSON documents the API expects is elementary. Below is an example of the PUT operation:</p>



<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/vZ1mhMtz/Screenshot-from-2022-09-13-23-16-58.png?resize=640%2C269&#038;ssl=1"" alt="""" width=""640"" height=""269"" data-recalc-dims=""1"" /></figure>



<p><br>Also, Swagger UI lets you try out operations and see the outcomes.</p>



<h2>References</h2>



<ul>
<li><a href=""https://swagger.io/blog/api-development/getting-started-with-swagger-i-what-is-swagger/"">https://swagger.io/blog/api-development/getting-started-with-swagger-i-what-is-swagger/</a></li>



<li><a href=""https://swagger.io/tools/swagger-ui/"">https://swagger.io/tools/swagger-ui/</a></li>
</ul>



<h2>Conclusion</h2>



<p>Now, time to wrap up. I hope you’re satisfied tools like Swagger are the way to go to build real REST API and get all the benefits this architecture style promises. Don’t wait any longer and check how to involve&nbsp;Swagger&nbsp;in your project, as it has out-of-the-box support for numerous REST frameworks (JAX-RS/Spring MVC for Java, Django for Python, etc).</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">5</span> <span class=""rt-label rt-postfix"">minutes</span></span> Swagger with Spring REST API REST is the ultimate way to expose web services nowadays. But, how do state to clients and how to use a REST API? There’s no real standard or at a minimum de facto standard to expose a REST contract. Many API spots human-readable documentation, which is currently edited and thus hard to keep perfectly synchronized with the API. Another process <a href=""https://blog.knoldus.com/swagger-with-spring-rest-api/"" class=""more-link"">Continue Reading</a></p>
",Swagger with Spring REST API - Knoldus Blogs,"REST is the ultimate way to expose web services nowadays. But, how do state to clients and how to use a REST API?",Shashikant Tanti,[['Swagger']],"[['Java', 'spring boot']]"
191482,2023-03-09 17:03:30,https://blog.knoldus.com/cloud-integration-and-migration-aspects-of-cloud-engineering/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Cloud computing has become an indispensable fragment of modern IT infrastructure. However, migration to the cloud can be a complex process, especially for organizations with existing on-premise infrastructure. One of the most critical steps in the cloud migration process is assessing the current architecture to evaluate the implementation potential of cloud computing, building proofs-of-concept (POCs) on business cases, and integrating the cloud with existing on-premise environments.</p>



<p>Here are some key steps to follow when assessing current architectures for cloud implementation:</p>



<h2><strong>Identify business objectives and use cases: </strong></h2>



<p>Before assessing the current architecture, it is essential to identify the business objectives and use cases that will drive the cloud implementation. This will help organizations prioritize which applications and data should be migrated to the cloud and which should remain on-premise.</p>



<h2><strong>Conduct a current-state assessment:</strong> </h2>



<p>Conduct a detailed assessment of the existing infrastructure to identify the hardware, software, and networking components that need to be migrated to the cloud. This will help organizations understand the current state of their IT infrastructure and identify potential roadblocks to cloud implementation.</p>



<h2><strong>Evaluate cloud providers: </strong></h2>



<p>Evaluate different cloud providers based on their capabilities, features, pricing, and security. This will help organizations select the right cloud provider that meets their business needs. Important aspects are </p>



<ol>
<li>Security</li>



<li>Performance</li>



<li>Reliability</li>



<li>Cost</li>



<li>Support</li>
</ol>



<h2><strong>Build POCs on business cases:</strong> </h2>



<p>Build POCs on the identified business cases to test the implementation potential of cloud computing. This will help organizations identify any potential issues with cloud implementation and refine the cloud migration strategy.</p>



<h2>Develop a cloud migration plan:</h2>



<p>Develop a detailed cloud migration plan that outlines the migration strategy, timelines, and resource requirements. This will help organizations execute the cloud migration process smoothly and minimize disruptions to business operations.</p>



<ol>
<li>Identify Your Objectives and Business Needs</li>



<li>Assess Your Current Infrastructure</li>



<li>Choose the Right Cloud Service Provider</li>



<li>Determine the Migration Strategy</li>



<li>Plan the Migration Timeline</li>



<li>Test and Validate</li>



<li>Train Your Staff</li>
</ol>



<h2>Integrate the cloud with the existing on-premise environment: </h2>



<p>Integrate the cloud with the existing on-premise environment for seamless data and application access. This can be achieved through the use of hybrid cloud architectures, which enable organizations to run applications and data both on-premise and in the cloud.</p>



<h2>Conclusion</h2>



<p>Cloud implementation can be a complex process, and organizations should take a methodical approach to ensure success. By assessing current architectures, building POCs on business cases, and integrating the cloud with existing on-premise environments, organizations can reap the benefits of cloud computing while minimizing disruptions to business operations. The cloud can enable organizations to scale their infrastructure, improve their flexibility, reduce costs, and enhance their security posture. Therefore, organizations should prioritize cloud implementation as part of their IT strategy.</p>



<p><br></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> Cloud computing has become an indispensable fragment of modern IT infrastructure. However, migration to the cloud can be a complex process, especially for organizations with existing on-premise infrastructure. One of the most critical steps in the cloud migration process is assessing the current architecture to evaluate the implementation potential of cloud computing, building proofs-of-concept (POCs) on business cases, and integrating the cloud with existing on-premise <a href=""https://blog.knoldus.com/cloud-integration-and-migration-aspects-of-cloud-engineering/"" class=""more-link"">Continue Reading</a></p>
",Cloud Integration and Migration aspects of Cloud Engineering - Knoldus Blogs,"The migration to the cloud can be a complex process, especially for organizations with existing on-premise infrastructure.",Rahul Miglani,[['Devops']],[['Studio-DevOps']]
191443,2023-03-08 0:45:57,https://blog.knoldus.com/private-public-and-managed-cloud-in-cloud-engineering-practice/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Cloud computing has revolutionized the way organizations store, manage and process their data. Cloud computing services are increasingly being used by businesses to reduce costs, improve productivity and enhance the overall efficiency of their operations. Cloud computing services can be broadly categorized into three types: private cloud, public cloud and managed cloud. In this blog, we will discuss the importance of each of these cloud computing services in cloud engineering practice.</p>



<h2><strong>Private Cloud</strong></h2>



<p>A private cloud is a type of cloud computing service that is exclusively used by a single organization. In a private cloud, the organization has complete control over the cloud infrastructure and can customize it according to their specific needs. Private clouds are usually deployed within an organization’s data center or on-premises. The importance of private cloud in cloud engineering practice can be summarized as follows:</p>



<h3><strong>Enhanced Security</strong></h3>



<p>Private clouds offer enhanced security as the organization has complete control over the cloud infrastructure. The organization can implement security measures such as firewalls, intrusion detection and prevention systems, and encryption to protect their data.</p>



<h3><strong>Greater Control</strong></h3>



<p>With a private cloud, organizations have greater control over the cloud infrastructure, allowing them to customize it according to their specific needs. This level of control enables organizations to optimize their cloud infrastructure for performance, security and compliance.</p>



<h3><strong>Improved Performance</strong></h3>



<p>Private clouds offer improved performance as the organization has dedicated resources, such as storage and computing power, for their use only. This ensures that the organization’s applications and services run smoothly and efficiently.</p>



<h2><strong>Public Cloud</strong></h2>



<p>The public cloud is a type of cloud computing service that is offered by third-party providers, such as Amazon Web Services, Microsoft Azure and Google Cloud Platform. In a public cloud, multiple organizations share the same cloud infrastructure. The importance of the public cloud in cloud engineering practice can be summarized as follows:</p>



<h3><strong>Scalability</strong></h3>



<p>Public clouds offer scalability, allowing organizations to quickly scale their resources up or down as needed. This enables organizations to respond quickly to changes in demand for their services.</p>



<h3><strong>Cost-effective</strong></h3>



<p>Public clouds offer cost-effective solutions as organizations only pay for the resources they use. This eliminates the need for organizations to invest in expensive hardware and software.</p>



<h3><strong>Global Availability</strong></h3>



<p>Public clouds are globally available, enabling organizations to deploy their applications and services in multiple regions around the world. This allows organizations to reach a wider audience and improve their service delivery.</p>



<h2><strong>Managed Cloud</strong></h2>



<p>Managed cloud is a type of cloud computing service that is offered by third-party providers. In a managed cloud, the third-party provider manages the cloud infrastructure and provides services such as maintenance, updates and support. The importance of managed cloud in cloud engineering practice can be summarized as follows:</p>



<h3><strong>Reduced Complexity</strong></h3>



<p>Managed clouds reduce the complexity of managing a cloud infrastructure. This enables organizations to focus on their core business activities, rather than on managing their cloud infrastructure.</p>



<h3><strong>Expertise</strong></h3>



<p>Managed clouds provide access to cloud experts who have the skills and knowledge to manage complex cloud infrastructures. This ensures that the cloud infrastructure is managed efficiently and effectively.</p>



<h3><strong>Improved Uptime</strong></h3>



<p>Managed clouds offer improved uptime as the third-party provider is responsible for maintaining and updating the cloud infrastructure. This ensures that the cloud infrastructure is always up-to-date and available.</p>



<p>In conclusion, private cloud, public cloud and managed cloud all play an important role in cloud engineering practice. The private cloud offers enhanced security, greater control and improved performance. The public cloud offers scalability, cost-effectiveness and global availability. Managed cloud reduces complexity, provides expertise and improves uptime. Organizations should carefully evaluate their needs and choose the cloud computing service that best suits their requirements.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Cloud computing has revolutionized the way organizations store, manage and process their data. Cloud computing services are increasingly being used by businesses to reduce costs, improve productivity and enhance the overall efficiency of their operations. Cloud computing services can be broadly categorized into three types: private cloud, public cloud and managed cloud. In this blog, we will discuss the importance of each of these cloud <a href=""https://blog.knoldus.com/private-public-and-managed-cloud-in-cloud-engineering-practice/"" class=""more-link"">Continue Reading</a></p>
","Private, Public and Managed cloud in Cloud Engineering Practice - Knoldus Blogs",Organizations should carefully evaluate their needs and choose the cloud computing service that best suits their requirements.,Rahul Miglani,[['Devops']],[['Studio-DevOps']]
191211,2023-03-07 21:08:53,https://blog.knoldus.com/meta-programming-in-scala-for-self-transforming-code/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<h2></h2>



<p><strong>Meta programming</strong> is a popular technique from 1970&#8217;s and 1980&#8217;s which used languages like LISP to enable applications to process code for artificial intelligence based applications. When a programming language is it&#8217;s own meta-language then it is called as <em>reflection. </em>Reflection is one of the important feature for any programming language to facilitate meta programming. Meta programming moves computations from run-time to compile-time thereby enabling self-modifying code. Hence, a program is designed in such a way that it can read, analyse or transform other programs or itself while it is running. This style of programming falls under Generic programming paradigm where the programming language itself is a first-class datatype.</p>


<div class=""wp-block-image"">
<figure class=""aligncenter size-full""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?ssl=1""><img data-attachment-id=""191221"" data-permalink=""https://blog.knoldus.com/meta-programming-in-scala-for-self-transforming-code/image-2-42/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?fit=642%2C178&amp;ssl=1"" data-orig-size=""642,178"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-2"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?fit=300%2C83&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?fit=640%2C177&amp;ssl=1"" decoding=""async"" width=""640"" height=""177"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?resize=640%2C177&#038;ssl=1"" alt="""" class=""wp-image-191221"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?w=642&amp;ssl=1 642w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-2.png?resize=300%2C83&amp;ssl=1 300w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure></div>


<p>This metaprogramming is exercised in various programming languages for various purposes. In Scala it is used as macro systems, muti-stage programming (runtime staging) etc.</p>



<h2>Meta programming in Scala</h2>



<p>Meta programming in Scala introduces fundamental features like:</p>


<div class=""wp-block-image"">
<figure class=""aligncenter size-full is-resized""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?ssl=1""><img data-attachment-id=""191218"" data-permalink=""https://blog.knoldus.com/meta-programming-in-scala-for-self-transforming-code/image-108/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?fit=310%2C163&amp;ssl=1"" data-orig-size=""310,163"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?fit=300%2C158&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?fit=310%2C163&amp;ssl=1"" decoding=""async"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?resize=421%2C222&#038;ssl=1"" alt="""" class=""wp-image-191218"" width=""421"" height=""222"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?w=310&amp;ssl=1 310w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image.png?resize=300%2C158&amp;ssl=1 300w"" sizes=""(max-width: 421px) 100vw, 421px"" data-recalc-dims=""1"" /></a></figure></div>


<ol>
<li><strong>Macros</strong>: built on two fundamental operations: quotation (via. as &#8216;{&#8230;}) and splicing (via. as ${ &#8230; }). Along with&nbsp;<code>inline</code>, these two abstractions allow to construct program code pro-grammatically.</li>



<li><strong>inline</strong>: A new modifier which guarantees definition will be inlined at point of use. It reduces overhead of function call and values access.</li>



<li><strong>Compile-time ops</strong>: helper functions that provides support for compile time operations like <code>constValue</code>&nbsp;and&nbsp;<code>constValueOpt</code></li>



<li><strong>Runtime Staging</strong>: To make code generation depend on run time data, staging lets code construct new code at runtime. </li>



<li><strong>Reflection</strong></li>



<li><strong>TASTy Inspection</strong>: Typed Abstract Syntax Tree allows to load files and analyse their content in tree structure.</li>
</ol>



<p>Adding these new meta programming capabilities adds enormous benefits and privileges for eliminating the boilerplate code and improving the overall performance of applications. With meta programming developers in scala can leverage their applications performance and remove all redundant &amp; boilerplate code with use of these features.</p>


<div class=""wp-block-image"">
<figure class=""aligncenter size-full is-resized""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-1.png?ssl=1""><img data-attachment-id=""191219"" data-permalink=""https://blog.knoldus.com/meta-programming-in-scala-for-self-transforming-code/image-1-56/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-1.png?fit=300%2C168&amp;ssl=1"" data-orig-size=""300,168"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-1"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-1.png?fit=300%2C168&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-1.png?fit=300%2C168&amp;ssl=1"" decoding=""async"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2023/03/image-1.png?resize=414%2C232&#038;ssl=1"" alt="""" class=""wp-image-191219"" width=""414"" height=""232"" data-recalc-dims=""1"" /></a></figure></div>


<h2>Trade-Offs: Macros over Functions</h2>



<p><strong>Execution Time</strong>: With macros we can make execution comparatively faster. As during processing a macro is expanded and replaced by its definition each time its used. On the other hand function definition occurs only once irrespective of number of times its called. Macros might increase code s lines of code but don&#8217;t have overhead associated with function calls.</p>



<h2>Clean Code with Macros</h2>



<p><strong>Repeated Code: </strong>Even though Scala syntax is concise that avoids boilerplate code that occurs in other JVM programming language. But still there are scenarios where developers might end up writing repetitive code and which can&#8217;t be refactored further for reuse. With Scala macros we can keep code clean and maintainable.</p>



<h2>Meta programming Features Snippets</h2>



<pre class=""wp-block-code""><code><strong>Inlined Method Example</strong>

inline def repeat(s: String, count: Int): String =

  inline count match

    case 0 =&gt; """"

    case _ =&gt; s + repeat(s, count-1)

<strong>Macros Example</strong>

import scala.quoted.*

// Note the quote '{...} and the argument types

private def failImpl&#91;T](

      predicate: Expr&#91;Boolean], message: Expr&#91;String],

      block: Expr&#91;T], beforeAfter: Expr&#91;String])(

      using Quotes): Expr&#91;String] =

    '{ throw InvariantFailure(  

      s""""""FAILURE! predicate ""${${showExpr(predicate)}}"" """"""

      + s""""""failed ${$beforeAfter} evaluation of block:""""""

      + s"""""" ""${${showExpr(block)}}"". Message = ""${$message}"". """""")

    }

private def showExpr&#91;T](expr: Expr&#91;T])(using Quotes): Expr&#91;String] =
    
val code: String = expr.show 

    Expr(code)


<strong>TASTy Inspection Example</strong>

<strong>&lt;Sample .tasty file&gt;</strong>

import scala.quoted.*

import scala.tasty.inspector.*

class MyInspector extends Inspector:

   def inspect(using Quotes)(tastys: List&#91;Tasty&#91;quotes.type]]): Unit =

      import quotes.reflect.*

      for tasty &lt;- tastys do

         val tree = tasty.ast

         // Your code here

<strong>Consumer of above .tasty file</strong>

object Test:

   def main(args: Array&#91;String]): Unit =

      val tastyFiles = List(""sample.tasty"")

      TastyInspector.inspectTastyFiles(tastyFiles)(new MyInspector)


<strong>Compile-time ops Example</strong>

/* constValue - function to produce constant value represented by a type, or 

a compile time error if the type is not a constant type. constValueOpt is  

same as constValue, however it returns Option&#91;T] to handle where a value is 

not present. */


import scala.compiletime.constValue

import scala.compiletime.ops.int.S

transparent inline def toIntConst&#91;N]: Int =

  inline constValue&#91;N] match

    case 0        =&gt; 0

    case _: S&#91;n1] =&gt; 1 + toIntConst&#91;n1]

inline val constTwo = toIntConst&#91;2]
</code></pre>



<h2>Meta programming Applications</h2>



<p>Program transformation systems can be helpful to build:</p>



<ul>
<li>Test coverage and profiling tools</li>



<li>&nbsp;Code generation &amp; completion tools</li>



<li>&nbsp;Automated Refactoring tools</li>



<li>&nbsp;Language migration tools</li>



<li>&nbsp;Tools to re-architecture/re-shape applications</li>



<li>&nbsp;Build Domain Specific Languages via. Metaprogramming</li>



<li> Project Templates</li>



<li>Dynamic Dispatch</li>



<li>Reflection</li>



<li>Aspect Oriented Programming (to resolve issues w.r.t logging, transaction management etc.)</li>



<li>&nbsp;GUI code generation</li>



<li>&nbsp;Compilers &amp; Interpreters implementation</li>



<li>&nbsp;Frameworks</li>



<li>&nbsp;ORM in dynamic language</li>
</ul>



<h2>Conclusion</h2>



<p>In statically typed languages like Java and Scala, meta programming is more constrained and is very less common. But it’s still useful for solving many advance real-time design problems. With more effort to separate compile-time versus runtime manipulation. Also, it gives more flexibility and configuration at runtime. Overall program can become more expressive and flexible with these techniques.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Meta programming is a popular technique from 1970&#8217;s and 1980&#8217;s which used languages like LISP to enable applications to process code for artificial intelligence based applications. When a programming language is it&#8217;s own meta-language then it is called as reflection. Reflection is one of the important feature for any programming language to facilitate meta programming. Meta programming moves computations from run-time to compile-time thereby enabling <a href=""https://blog.knoldus.com/meta-programming-in-scala-for-self-transforming-code/"" class=""more-link"">Continue Reading</a></p>
",Metaprogramming in Scala: Self-transforming code - Knoldus Blogs,This blog talks about Meta programming technique that moves computations from run-time to compile-time thereby enabling self-modifying code.,Karuna,[],[['Studio-Scala']]
191393,2023-03-07 17:17:06,https://blog.knoldus.com/http4s-dig-deeper/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Our previous <a href=""https://blog.knoldus.com/http4s-for-functional-http/"">blog</a> on http4s gives us an introduction to the library to create HTTP routes, servers and clients. Using the library&#8217;s support for various libraries like Ember, Blaze, we can create any type of server and/or client. The library also provides for other libraries for easy encoding/decoding of request and response body using circe, scala-xml, and fs2-data. Ultimately, the heart of the library lies in the type <code>HttpRoutes</code>, allowing us to create a series of http routes and map different behaviours to it.</p>



<p>Using http4s DSL and supported modules, we can easily create a self-sustained HTTP service, complete with a server and a client. But it&#8217;s use case does not just end there. The library allows us to define and reuse a Middleware around our request/response to manipulate it before forwarding it to the server/client respectively. It allows us to add an extra layer to our basic http4s service.</p>



<h3>http4s Middleware</h3>



<p>A <strong>middleware</strong> is an abstraction around our service that allows us to manipulate the request sent to it, and/or the response it returns.</p>



<h4>Creating a middleware</h4>



<p>At its most basic, middleware is a function that takes one service and returns another. Consider a basic scenario where we want to add extra headers to a response before sending it back to the client. A middleware can be easily created to do so as:</p>



<pre class=""wp-block-code has-medium-font-size""><code>def myMiddle(service:HttpRoutes&#91;IO], header: Header.ToRaw):

HttpRoutes&#91;IO] = Kleisli { (req: Request&#91;IO]) =&gt;

  service(req).map {

    case Status.Successful(resp) =&gt;

      resp.putHeaders(header)

    case resp =&gt; resp

  }

}</code></pre>



<p>All we do here is pass the request to the service, which returns an <code>F[Response]</code>. Then, we use a map to get the response out of the task, add headers to it if it is a success, finally passing it on to the client.</p>



<h4>Using the middleware</h4>



<p>Consider the following scenario where we define a service using <code>HttpRoutes</code>:</p>



<pre class=""wp-block-code""><code>val service = HttpRoutes.of&#91;IO] {<br>
  case GET -&gt; Root / ""bad"" =&gt;<br>
    BadRequest()<br>
  case _ =&gt; Ok()<br>
}<br>
val goodRequest = Request&#91;IO](Method.GET, uri""/"")<br>
val badRequest = Request&#91;IO](Method.GET, uri""/bad"")<br></code></pre>



<p>The service works fine if we hit the endpoint <code>""/""</code>, but a failure if we hit <code>""/bad""</code>. We can test the service on the REPL itself without using a server or client:</p>



<pre class=""wp-block-code""><code>service.orNotFound(goodRequest).unsafeRunSync()<br>
// res0: Response&#91;IO&#91;A]] = (<br>
//    = Status(code = 200),<br>
//    = HttpVersion(major = 1, minor = 1),<br>
//    = Headers(Content-Length: 0),<br>
//    = Entity.Empty,<br>
//    = org.typelevel.vault.Vault@59ee59bb<br>
// )

service.orNotFound(badRequest).unsafeRunSync()<br>
// res1: Response&#91;IO&#91;A]] = (<br>
//    = Status(code = 400),<br>
//    = HttpVersion(major = 1, minor = 1),<br>
//    = Headers(Content-Length: 0),<br>
//    = Entity.Empty,<br>
//    = org.typelevel.vault.Vault@e1ec764<br>
// )</code></pre>



<p>Using this implementation, we can apply our middleware that adds headers to a successful response as:</p>



<pre class=""wp-block-code""><code>val modifiedService = myMiddle(service, ""SomeKey"" -> ""SomeValue"");</code></pre>



<p>Here, modifiedService is a new service with the middleware wrapping the old one. Since it is an http service as well, we can test it too:</p>



<pre class=""wp-block-code""><code>modifiedService.orNotFound(goodRequest).unsafeRunSync()<br>
// res2: Response&#91;IO&#91;A]] = (<br>
//    = Status(code = 200),<br>
//    = HttpVersion(major = 1, minor = 1),<br>
//    = Headers(Content-Length: 0, SomeKey: SomeValue),<br>
//    = Entity.Empty,<br>
//    = org.typelevel.vault.Vault@7eb65acc<br>
// )<br>
modifiedService.orNotFound(badRequest).unsafeRunSync()<br>
// res3: Response&#91;IO&#91;A]] = (<br>
//    = Status(code = 400),<br>
//    = HttpVersion(major = 1, minor = 1),<br>
//    = Headers(Content-Length: 0),<br>
//    = Entity.Empty,<br>
//    = org.typelevel.vault.Vault@1a3e86a8<br>
// )</code></pre>



<p>In the response generated from a successful hit, we can see that the new headers are present. </p>



<h4>Composing Services with Middleware</h4>



<p>Since middleware returns a <code>Kleisli</code>, basically an http service, we can compose it with another middleware. Consider the following:</p>



<pre class=""wp-block-code""><code> val apiService = HttpRoutes.of&#91;IO] {<br>
  case GET -&gt; Root / ""api"" =&gt;<br>
    Ok()<br>
}<br>
val anotherService = HttpRoutes.of&#91;IO] {<br>
  case GET -&gt; Root / ""another"" =&gt;<br>
    Ok()<br>
}<br>

val aggregateService = apiService &lt;+&gt; myMiddle(service &lt;+&gt; anotherService, ""SomeKey"" -&gt; ""SomeValue"")

val apiRequest = Request&#91;IO](Method.GET, uri""/api"")</code></pre>



<p>Here the <code>aggregateService</code> is a composition of <code>apiService</code> (no middleware) and another service we get after applying the middleware <code>myMiddle</code> to two different services. The output will look like:</p>



<pre class=""wp-block-code""><code>aggregateService.orNotFound(goodRequest).unsafeRunSync()
// res6: Response&#91;IO&#91;A]] = (<br>
//    = Status(code = 200),<br>
//    = HttpVersion(major = 1, minor = 1),<br>
//    = Headers(Content-Length: 0, SomeKey: SomeValue),<br>
//    = Entity.Empty,<br>
//    = org.typelevel.vault.Vault@5c7b0bb<br>
// )

aggregateService.orNotFound(apiRequest).unsafeRunSync()

// res7: Response&#91;IO&#91;A]] = (<br>
//    = Status(code = 200),<br>
//    = HttpVersion(major = 1, minor = 1),<br>
//    = Headers(Content-Length: 0),<br>
//    = Entity.Empty,<br>
//    = org.typelevel.vault.Vault@6ba27d6d<br>
// )</code></pre>



<h3>Included Middleware</h3>



<p>http4s includes some middleware out of the box in its codebase including for:</p>



<ul>
<li>Authentication: This supports use of Authentication Header as part of the request, or using cookies.</li>



<li>CORS: This can be used for adding the appropriate headers to responses to allow limited exceptions to this via cross origin resource sharing.</li>



<li>Response Compression: GZip Middleware can be used to compress the response body using GZip.</li>



<li>Metrics: We have OOB middleware for Dropwizard and Prometheus metrics.</li>



<li>X-Request-ID header: We can use the X-Request-ID to automatically generate a X-Request-ID header to a request, if one wasn&#8217;t supplied.</li>
</ul>



<h2>Conclusion</h2>



<p>http4s Middleware allows us to bring various different layers to our http service, either OOB or by implementing a custom one of our own. Authentication being the most common and important middleware required in any http service, can be easily implemented using http4s codebase. In a separate blog, we will have a look at how to create routes, and how to create authenticated routes using OOB middlware support for authentication.</p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Our previous blog on http4s gives us an introduction to the library to create HTTP routes, servers and clients. Using the library&#8217;s support for various libraries like Ember, Blaze, we can create any type of server and/or client. The library also provides for other libraries for easy encoding/decoding of request and response body using circe, scala-xml, and fs2-data. Ultimately, the heart of the library lies <a href=""https://blog.knoldus.com/http4s-dig-deeper/"" class=""more-link"">Continue Reading</a></p>
",http4s - Dig Deeper - Knoldus Blogs,"http4s Middleware adds an extra layer to our basic http service. Using some OOB supports, we can add authentication, CORS, etc to our service.",Swantika Gupta,"[['Authentication', 'http4s', 'middleware', 'scala']]",[['Studio-Scala']]
191383,2023-03-07 11:44:13,https://blog.knoldus.com/how-cloud-readiness-assessment-is-the-most-important-aspect-of-cloud-engineering-practice/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Cloud computing has become an integral part of contemporary technology. With its ease of use and accessibility, businesses of all sizes are shifting to cloud-based solutions to keep up with the fast-paced market. However, adopting cloud services without proper planning and preparation can result in a variety of issues such as security breaches, system downtime, and inefficient resource utilization. Therefore, a cloud readiness assessment, audit, and maturity checking is an essential parts of cloud engineering practice to ensure that your cloud infrastructure is ready and well-managed.</p>



<h2><strong>Cloud readiness assessment</strong></h2>



<p>A <strong>cloud readiness assessment</strong> is a comprehensive evaluation of an organization&#8217;s current IT infrastructure, processes, and policies to determine its readiness to move to the cloud. This assessment typically includes a review of existing hardware and software infrastructure, data centre capabilities, networking, and security controls. The goal is to identify potential issues that could impact a successful cloud migration and develop a plan to mitigate those issues.</p>



<p>One of the primary benefits of conducting a cloud readiness assessment is that it helps to identify the appropriate cloud deployment model for your organization. There are three main cloud deployment models, including public, private, and hybrid clouds. The cloud readiness assessment helps to determine the most suitable cloud deployment model based on your organization&#8217;s specific needs, including a budget, security, compliance, and business objectives.</p>



<p>Once the organization has decided on the cloud deployment model, performing a cloud audit is next. A cloud audit is a comprehensive evaluation of the cloud environment to ensure compliance with industry regulations and best practices. This audit is essential to ensure that the cloud environment meets the organization&#8217;s security and compliance requirements.</p>



<h2><strong>Cloud audit</strong></h2>



<p>A <strong>cloud audit</strong> typically involves reviewing the cloud provider&#8217;s policies, procedures, and controls to ensure that they are consistent with the organization&#8217;s requirements. This includes evaluating the cloud provider&#8217;s security controls, disaster recovery plan, data encryption, and access controls. Additionally, the audit includes reviewing the service-level agreements (SLAs) to ensure that they meet the organization&#8217;s uptime and performance requirements.</p>



<p><br>Cloud audit is critical for ensuring the security, compliance, and efficiency of cloud-based systems and services. As more businesses move to the cloud, there is a growing need to audit cloud environments to identify and address security risks, optimize performance, and ensure regulatory compliance. Cloud audits provide a comprehensive review of cloud infrastructure, applications, and data to identify vulnerabilities, misconfigurations, and compliance gaps. This helps businesses to identify areas of improvement and take corrective action to minimize risks and ensure compliance. Cloud audits also provide insights into the usage and cost of cloud services, helping businesses to optimize their cloud usage and reduce costs. In summary, cloud audits are essential for maintaining the security, compliance, and efficiency of cloud-based systems and services.</p>



<h2><strong>Cloud maturity assessment</strong></h2>



<p>Furthermore, conducting a <strong>cloud maturity assessment</strong> is critical to evaluate the organization&#8217;s overall cloud maturity level. A cloud maturity assessment is a comprehensive evaluation of an organization&#8217;s ability to effectively leverage cloud services. This assessment typically includes evaluating the organization&#8217;s cloud strategy, governance, operations, and security controls.</p>



<p>The benefits of conducting a <strong>cloud maturity assessment </strong>are numerous. For example, it helps organizations identify areas of improvement to optimize their cloud usage and maximize the benefits of cloud services. Additionally, it helps organizations evaluate their readiness to implement new cloud technologies and services, such as containerization and serverless computing.</p>



<p>In conclusion, cloud computing has become an essential part of modern technology. However, it is crucial to ensure that your organization is well-prepared before migrating to the cloud. Conducting a cloud readiness assessment, audit, and maturity checking is an essential part of cloud engineering practice to ensure that your cloud infrastructure is ready, secure, and well-managed. By doing so, organizations can avoid potential issues that could impact a successful cloud migration and maximize the benefits of cloud services.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Cloud computing has become an integral part of contemporary technology. With its ease of use and accessibility, businesses of all sizes are shifting to cloud-based solutions to keep up with the fast-paced market. However, adopting cloud services without proper planning and preparation can result in a variety of issues such as security breaches, system downtime, and inefficient resource utilization. Therefore, a cloud readiness assessment, audit, <a href=""https://blog.knoldus.com/how-cloud-readiness-assessment-is-the-most-important-aspect-of-cloud-engineering-practice/"" class=""more-link"">Continue Reading</a></p>
",How Cloud readiness assessment is the most important aspect of cloud engineering practice - Knoldus Blogs,One of the primary benefits of conducting a cloud readiness assessment is that it helps to identify the appropriate cloud deployment model .,Rahul Miglani,[['Devops']],[['Studio-DevOps']]
176178,2023-03-07 8:29:02,https://blog.knoldus.com/reactive-programming-spring-webflux/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large is-resized is-style-rounded""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/4x78ptXp/images223.jpg?resize=440%2C332&#038;ssl=1"" alt="""" width=""440"" height=""332"" data-recalc-dims=""1"" /></figure>



<h2>Reactive Programming</h2>



<p>Reactive has specific characteristics that make them ideal for low-latency, high-throughput workloads. Project Reactor and the springWebflux work together to enable developers to build enterprise-grade reactive systems that are responsive, resilient, elastic, and message-driven.</p>



<h3>What is reactive processing?</h3>



<p>Reactive processing is a paradigm that enables developers to build non-blocking and asynchronous applications which can handle back-pressure (flow control).</p>



<h3>Why use reactive processing?</h3>



<p>Reactive programming is a&nbsp;<strong>design approach</strong>&nbsp;that uses&nbsp;<strong>asynchronous programming logic</strong>&nbsp;to handle&nbsp;<strong>real-time adjustments</strong>&nbsp;for typically static information. It gives an efficient mechanism — the use of&nbsp;<strong>automated data streams</strong>&nbsp;— for handling content modifications in response to user queries.</p>



<p>Reactive Manifesto<br>Principles (applies to system and applications):<br>● Responsive<br>○ It needs to respond quickly. The time of the requisition itself is independent of this.<br>● Resilient<br>○  It should acknowledge well and support Back-Pressure<br>○  Messages in control<br>○  Avoid catastrophic failure<br>●  Elastic<br>○ Automatic Generation of resources. More threads in our case.<br>● Message Driven<br>○ Publisher/Subscriber</p>



<h2 id=""7cba"">What is Spring Webflux?</h2>



<p id=""8f89"">The Spring Webflux was included in Spring 5 to provide reactive systems support to the Spring-based applications and it is based on Project Reactor and uses non-blocking reactive streams.</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/SQ6bZRL1/webflux.webp?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<h2 id=""b52a"">To set up Spring Webflux  required dependencies :</h2>



<p id=""c96f"">We just need the dependency, the latest version as of August 2022.</p>



<pre class=""wp-block-preformatted has-black-color has-text-color has-background"" style=""background:linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,198,227) 50%,rgb(51,167,181) 100%)"">&lt;dependency&gt; 
   
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;

  &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
 
  &lt;version&gt;2.7.0&lt;/version&gt; 

&lt;/dependency&gt;</pre>



<p id=""c87c"">Usually, we add&nbsp;<strong>spring-boot-starter-web</strong>&nbsp;for the traditional MVC framework model but we add&nbsp;<strong>spring-boot-starter-web flux&nbsp;</strong>for the reactive application using web flux.</p>



<p id=""d3c6"">This dependency includes the below dependencies</p>



<ul>
<li><em>springwebflux&nbsp;</em>framework</li>



<li><em>reactor-core</em>&nbsp;that we need for reactive streams</li>



<li><em>reactor-netty (the default server that supports </em>its<em> streams). Any other servlet 3.1+ containers like Tomcat, Jetty, or non-servlet containers like Undertow can be used as well</em></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-vivid-cyan-blue-color"">use <em>spring-boot</em> </mark> &amp; <em><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-vivid-cyan-blue-color"">spring-boot-starter </mark></em>for basic Spring Boot application setup.</li>
</ul>



<h2 id=""bb80"">Reactive Spring Security</h2>



<p id=""c914"">Spring Security is used to secure the reactive endpoints / APIs. It works in a similar way as the normal Spring Boot application by using the dependency as shown below-</p>



<pre class=""wp-block-code has-black-color has-text-color has-background"" style=""background:linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,213,227) 50%,rgb(51,167,181) 100%)""><code>&lt;dependency&gt; 

  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; 
        
  &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;     

&lt;/dependency&gt;</code></pre>



<p id=""e55f"">We need to use the following annotation and the configuration to set up basic authentication and authorization.</p>



<pre class=""wp-block-preformatted has-black-color has-text-color has-background"" style=""background:linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,204,227) 50%,rgb(51,167,181) 100%)""><a href=""http://twitter.com/EnableWebFluxSecurit"" target=""_blank"" rel=""noreferrer noopener"">@EnableWebFluxSecurit</a>y
public class HelloWebfluxSecurityConfig {

<a href=""http://twitter.com/Bean"" target=""_blank"" rel=""noreferrer noopener"">@Bean</a>
 public MapReactiveUserDetailsService userDetailsService() {

  UserDetails user = User.withDefaultPasswordEncoder()

   .username(""user"")

   .password(""user"")

   .roles(""USER"")

   .build();

  return new MapReactiveUserDetailsService(user);

 }

}</pre>



<h2>SpringWebFlux Basics</h2>



<p><br>Observer Pattern<br>It Is a practice design pattern that  lets you define a subscription mechanism to<br>notify multiple objects about any incidence that happens to the object they’re<br>observing.<br>In other words, we are using declarative programming instead of imperative<br>programming.</p>



<p>SpringWebFlux Publishers<br>● Flux<br>○  Its a publisher for a stream of objects<br>○  It is used to create lists of objects<br>○  Processes one stream end to end<br>○  To handles stream events<br>● Mono<br>○ A publisher for a single object<br>○ Handles object events<br><br>Flux. just, Flux. from, Flux. from iterable,<br>Flux. from the array, Flux. from the stream,<br>Flux.zip<br>Mono. just, Mono. from,<br>Mono.fromCallable, Mono.zip,<br>Mono. from future, Mono. from direct,<br>Mono.fromRunnable</p>



<h2>SpringWebFlux Parallelism</h2>



<p><br>● Flux and ParallelFlux<br>○ .parallel(parallelism).runOn(Schedulers.parallel())<br>● Mono<br>○ .subscribeOn(Schedulers.parallel())</p>



<h2>Reference :</h2>



<ul>
<li><a href=""https://www.baeldung.com/spring-webflux"" target=""_blank"" rel=""noreferrer noopener"">https://www.baeldung.com/spring-webflux</a></li>
</ul>



<ul>
<li><a href=""https://www.cognizantsoftvision.com/blog/getting-started-with-reactive-spring-spring-webflux/"">https://www.cognizantsoftvision.com/blog/getting-started-with-reactive-spring-spring-webflux/</a></li>
</ul>



<h2>Conclusion :</h2>



<p id=""08fe"">When we decide whether or not to use Spring WebFlux, we need to take into account that in order to take advantage of it we need to ensure the entire flow uses reactive and asynchronous programming and not any of the operations are blocking. The application will necessary to run on non-blocking servers, just like Netty, Undertow, and Servlet 3.1+ containers, and use a reactive database driver. Also, we need to consider that when processing data we need to manipulate Mono and Flux API operations, which might take some time to get experienced with and can be harder to debug.</p>



<p id=""ce11"">Spring WebFlux is well fit for ultra concurrent applications. These applications need to be able to process a large number of requests with as few resources as possible, applications that need scalability, or applications that need to stream request data in a live manner.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Reactive Programming Reactive has specific characteristics that make them ideal for low-latency, high-throughput workloads. Project Reactor and the springWebflux work together to enable developers to build enterprise-grade reactive systems that are responsive, resilient, elastic, and message-driven. What is reactive processing? Reactive processing is a paradigm that enables developers to build non-blocking and asynchronous applications which can handle back-pressure (flow control). Why use reactive processing? Reactive <a href=""https://blog.knoldus.com/reactive-programming-spring-webflux/"" class=""more-link"">Continue Reading</a></p>
",Reactive Programming: Spring WebFlux - Knoldus Blogs,"Reactive systems have specific characteristics that make them ideal for low-latency, high-throughput workloads.springwebflux",Shashikant Tanti,[['Spring Webflux']],"[['Java', 'Reactive Programming']]"
191371,2023-03-06 17:30:29,https://blog.knoldus.com/how-to-understand-the-4-pillars-of-cloud-engineering/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>The cloud has revolutionized the way businesses operate, allowing for greater flexibility, scalability, and cost savings. However, it takes a lot more than just moving to the cloud to fully reap its benefits. This is where cloud engineering practices come in, and they are essential for ensuring a successful cloud journey. In this blog, we will delve into the four pillars of cloud engineering practice: Cloud Strategy &amp; Architecture Consulting, Cloud Integration &amp; Migration, Cloud Application Development, and Cloud Modernization, Optimization, and Governance.</p>



<h2><strong>Pillar 1: Cloud Strategy &amp; Architecture Consulting</strong> </h2>



<p><br>Before moving to the cloud, it is crucial to develop a cloud strategy that aligns with your business objectives. Cloud Strategy &amp; Architecture Consulting helps you to create a roadmap that outlines how you will leverage the cloud to achieve your goals. This pillar involves evaluating your current infrastructure and identifying areas that need improvement. The consulting team will then help you design a cloud architecture that is scalable, secure, and cost-effective.</p>



<h2><strong>Pillar 2: Cloud Integration &amp; Migration</strong> </h2>



<p><br>Moving to the cloud involves a lot more than just lifting and shifting your applications. Cloud Integration &amp; Migration is the process of moving your applications and data to the cloud while ensuring that they work seamlessly with other applications in the cloud and on-premises. This pillar involves assessing your current applications and determining which ones are suitable for migration. The migration process must be carefully planned to ensure that it does not disrupt your business operations. The integration of your applications with the cloud is also a critical aspect of this pillar.</p>



<h2><strong>Pillar 3: Cloud Application Development</strong> </h2>



<p>Cloud Application Development involves building applications that are specifically designed to run in the cloud. These applications are typically developed using cloud-native technologies such as containers, microservices, and serverless computing. This pillar involves identifying the applications that can be developed in the cloud, and designing them to take advantage of the scalability and flexibility of cloud resources. The development team will also ensure that the applications are secure and highly available.</p>



<h2><strong>Pillar 4: Cloud Modernization, Optimization, and Governance</strong> </h2>



<p><br>The cloud is not a one-time project, but an ongoing journey. Cloud Modernization, Optimization, and Governance is the process of continually improving your cloud infrastructure to ensure that it remains aligned with your business objectives. This pillar involves monitoring your cloud infrastructure to identify areas that need improvement, and then optimizing them to reduce costs and improve performance. Governance is also a critical aspect of this pillar, ensuring that your cloud infrastructure is compliant with regulatory requirements and that security and risk management are well-established.</p>



<p>In conclusion, cloud engineering practices are essential for a successful cloud journey. The four pillars of Cloud Strategy &amp; Architecture Consulting, Cloud Integration &amp; Migration, Cloud Application Development, and Cloud Modernization, Optimization, and Governance must be well-established and aligned with your business objectives. By implementing these practices, you can ensure that your organization reaps the full benefits of the cloud.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> The cloud has revolutionized the way businesses operate, allowing for greater flexibility, scalability, and cost savings. However, it takes a lot more than just moving to the cloud to fully reap its benefits. This is where cloud engineering practices come in, and they are essential for ensuring a successful cloud journey. In this blog, we will delve into the four pillars of cloud engineering practice: <a href=""https://blog.knoldus.com/how-to-understand-the-4-pillars-of-cloud-engineering/"" class=""more-link"">Continue Reading</a></p>
",How to understand the 4 pillars of cloud engineering - Knoldus Blogs,"The cloud has revolutionized the way businesses operate, allowing for greater flexibility, scalability, and cost savings.",Rahul Miglani,[],[['Studio-DevOps']]
187732,2023-03-06 0:17:20,https://blog.knoldus.com/provisioning-an-s3-bucket-with-crossplane/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/KYbEckjAmpkkf9o1xa7Dk6oZIvCv9EOYvppjqeChbCSKrEe6Qg5Qcmci1UdBfeabvZX1zsSzy-EcuqOO7cdojF70Nk22eKONmgZm1o4y-agWTTh6Y-G5iu3rNYBGhP79cw3FdzEXTNNUUW160upCx0w"" alt=""""/></figure>



<p>Crossplane has been gaining popularity in recent times. Crossplane works well with Kubernetes in the frame. We can now manage the deployment of microservices in the k8s cluster and also the managed components of the cloud (cloud services) using a single tool. Moreover, you can configure the same deployment tool (like, Argocd) for the same.</p>



<h3>Pre-requisites</h3>



<p>AWS credentials</p>



<p>You will have to get the base64 encoded credentials. For example,</p>



<p>accesskey=AKIAZDGREVP3HOJRLOEU</p>



<p>secretkey=D868Rywx0weUaJB2k5R+nQfoxIcq4h7T3P6/GwBv</p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/10_AcFvo9sCLHEHojqSlQu111eAdME9anWHgz6SPDDRDGdX51u-2xniRGKnQ1JS04Je-HMl2XR_n5qVG42XI3eDE7MFpnBLCwvg9Va__p21Z6B9ljEfyS2tD00Z9tX1l3Ka22-7oltWF9_lGe28VwFk"" width=""624"" height=""61""></p>



<p>Create a secret </p>



<p><code>apiVersion: v1<br>kind: Secret<br>metadata:<br>  name: aws-creds<br>  namespace: crossplane-system<br>type: Opaque<br>data:&nbsp;&nbsp;creds: $BASE64ENCODED_AWS_ACCOUNT_CREDS</code></p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/rv_6aNr5QWFHMmi-Ab5bpi2iEkeU5imk1SLWYulswTS0AFOZar9dG28OQa1AaN6JmO5nLPqoJN09-Q6f7DaZJxbCZqWEMMivt3KhUvuSSRP-8zyO8ITXF0D8mnRDBcsgVYSky64UgwFRxWeQgeyp5FE"" width=""624"" height=""92""></p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/mR5AMBjbo98bYvap9cm44FCnmmnkcAK7_7eJQ4uy1wX2OWy8ZwquEZjicKt3HkmXqKtVvRR05xNRTtJf0n2msTClcT7EoPdUbYooAvkPxHP8Wbc6z6wa-4TDzu7aIpnmDIBQgBhgCQXpzvmq4ZSpFHg"" width=""338"" height=""42""></p>



<p>Create aws-provider.yaml</p>



<p><code>apiVersion: pkg.crossplane.io/v1<br>kind: Provider<br>metadata:<br>  name: provider-aws<br>spec:<br>  package: crossplane/provider-aws:v0.24.1<br>  controllerConfigRef:<br>     name: aws-config</code></p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/6TrG6OMml7XVXDG6B1lYVAgpwXZMFiV4oAZC_4Kldr_ppsdkswSJuBjeE350vtzGnASc3x2JUAIVBjaXbrngBHj6Psy_SCP4KK0zz77HH6D_yNkAgub39Avd6nuIFZc8BXaix0WtDbrNZaBTjKY1wxA"" width=""322"" height=""157""></p>



<p>Create a provider-config.yaml</p>



<p><code>apiVersion: aws.crossplane.io/v1beta1<br>kind: ProviderConfig<br>metadata:<br>  name: default<br>spec:<br>  credentials:<br>    source: Secret<br>    secretRef:<br>    namespace: crossplane-system<br>    name: aws-creds&nbsp;&nbsp; <br>    key: creds</code></p>



<p><img decoding=""async"" src=""https://lh5.googleusercontent.com/xqMImVU9T-IuYLkYm_mfOYLDE_dsnjQEKlU4S2jeG-tdaQfPb86W9dVP5rw_-2bETeV2wHh3wO5owNBp-p-xVoFoGKWR6mm-U-o6RpWEpgGj2sZ8RokoE4rK9HQWRSBmejTp_vbBoSb9RHWiV9CI2to"" width=""346"" height=""203""></p>



<p>Create a Controller-Config.yaml</p>



<p><code>apiVersion: pkg.crossplane.io/v1alpha1<br>kind: ControllerConfig<br>metadata:<br>  name: aws-config<br>  annotations:<br>     eks.amazonaws.com/role-arn: arn:aws:iam::894897474192:role/crossplane-role<br>spec:<br>  podSecurityContext:<br>  fsGroup: 2000</code></p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh3.googleusercontent.com/slfo1RbM4PYoNjKE1PyfeWOA231nMuv6Cu0j7nGgWR0pY9UANeOk1u5kaxMX9_fW2HGltVhGFJuFQpiR-tFECpcGP7TR3sNCiWaVvwLUlRaVxzYKYYCq813EG3_39IvlbhXri1yvyquyo4XxcXj31GI"" alt=""""/></figure>



<p>Create a snippet for an s3 bucket in a bucket.yaml file.</p>



<p><code>apiVersion: s3.aws.crossplane.io/v1beta1<br>kind: Bucket<br>metadata:<br>  name: knoldus-crossplane-bucket<br>  namespace: crossplane-system<br>spec:<br>  forProvider:<br>     acl: private<br>     locationConstraint: us-east-1<br>     versioningConfiguration:<br>     status: Enabled<br>  providerConfigRef:<br>    name: default</code></p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/k1ETFtT3iOffKreGkNNnfXYbdTjzsgfJPWPNOO6PDx5b1NhbUODj7HWVlo8ffRhlm87efjI6AbCA82ruxE2GEzxILTXlnqDYEvxtAOAyD0BVGWzjVfmyoMVN_xoFbAR0ErSGTeTA5rcKsSRWohO9k5A"" width=""313"" height=""236""></p>



<p>Apply the aws-provider.yaml and providerConfig.yaml</p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/etMTHpj-v5NzJmR2qGCuKRiRQZLEGmGETDW75x8gHHOfNRGgbId45nxIJ94WmJm8jhWHOfkaviRIKHtaH7bsyaCnOfS1Mnpat4yR6BJpSXkzvomntiwBwDOE4VgGcoRgCtw_Wdy9N88h2KKtqkXA8XU"" width=""480"" height=""48""></p>



<p><img decoding=""async"" src=""https://lh5.googleusercontent.com/wAaPs6LvYMeJZoREbCsI16cDOH9jYWxFP_8WPkndCYVaCQr5p2HZyluBctlo6rZvTVfsuGOXYkz5Kwyl-xUoNPbRl8azIakTwJ9_9Uxd692nTNe1bnXNTj6zk1J5OsXDaiNzFtzOKi8GKC-AJhfRfwc"" width=""353"" height=""64""></p>



<p>Describe this bucket to know the details.</p>



<p><img decoding=""async"" src=""https://lh5.googleusercontent.com/yg3giZ4O4WgbplfW1JoyCq_NE7c925fBrg1T_Pt336RLjuU2QnqlG7G9xjCAzCazAcadEF_UnftyCW5tdFU_R1NbfQKo51X6CqxcHKXoOlGe-6kUijajVGUsQnPamN0O0YdfZyze51ZJwuOYvDApRp0"" width=""624"" height=""724""></p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/KzWf5FS-lEHhGcYz_pjS5wtgu3eiaabHxTenNocJRBuAet7TeQwQofdfvn08ARJf3-3Vebir3hrBwabvxQbH9oKxmhcNmBoWHg5JjOKxM1pbqU-BrMiIeOpG_KZ9Nb4rojkfB-m8hvF3evfKIb4Adm0"" width=""624"" height=""552""></p>



<h3>Viewing from AWS console</h3>



<p>You can view the same thing in the console.</p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/NLdJtWm8QG6HBqiRRCdylp8CDBdulZUiBNWq8fuOePe4aYUqUgOs6BDwv3FRFoOcSux7eNosmlUlvbT4tTdmaOZ1T8A98lqDR8x37McnTP_WG6lMKJ7TrILDqH1bwqRet8LMtmHHlpoZXUl0FdSpB1o"" width=""624"" height=""93""></p>



<h3>Destroy the infrastructure:</h3>



<p><strong><img decoding=""async"" src=""https://lh6.googleusercontent.com/1BWS8Bje3dn18g63GIWUcMMQpWVc96BF9aSI-18M1NkBNewIUL-9VHBiUNNum-y3pq8e6avMzf4V8MOost3gYU03mRHCgmfbOnkTSPLgqzQhgGJQ5lQOSPUj8k7oTukNbSv9lv2zoJ3iPbr--Mzi2q4"" width=""463"" height=""47""></strong></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Crossplane has been gaining popularity in recent times. Crossplane works well with Kubernetes in the frame. We can now manage the deployment of microservices in the k8s cluster and also the managed components of the cloud (cloud services) using a single tool. Moreover, you can configure the same deployment tool (like, Argocd) for the same. Pre-requisites AWS credentials You will have to get the base64 <a href=""https://blog.knoldus.com/provisioning-an-s3-bucket-with-crossplane/"" class=""more-link"">Continue Reading</a></p>
",Provisioning an S3 bucket with Crossplane - Knoldus Blogs,Crossplane works well with Kubernetes allowing microservices and cloud components and services to be managed from a singe tool.,Vidushi Bansal,"[['AWS', 'crossplane', 'kubernetes', 'S3']]",[['Studio-DevOps']]
189371,2023-03-06 0:17:15,https://blog.knoldus.com/using-pulumi-to-spin-up-an-s3-bucket/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p><img decoding=""async"" width=""516"" height=""171"" src=""https://lh5.googleusercontent.com/CPfqVDSPaQrUyu5Sh_LGDcU88GiGVD5ZJa3dC0WMHHKjCtiHIO4JA3EqMTXkR1SP4OCV1ZGTrzr3kgeG8IdCh0sR0wLf8QgdO8ghYefJ4LTSQXfDvuoDmmXH-UkkI5Sy7xNdD2OU_1rTubayMPQAhls""></p>



<p>Pulumi is an infrastructure as a Code tool that you can use to spin up any infrastructure-related components in the cloud or on-prem. In this blog, we will go through the steps involved in creating AWS service components using Pulumi. </p>



<h3>Pre-requisites</h3>



<p class=""has-vivid-green-cyan-color has-text-color"">AWS Access Key<br>AWS Secret Key<br>Pulumi client</p>



<p>Let&#8217;s create a new directory for our workloads.</p>



<p><code>mkdir knoldus<br>cd knoldus</code></p>



<h4>Create a Pulumi stack</h4>



<p><code>pulumi new aws-yaml</code></p>



<p>You can log in via GitHub or mail. Once you log in, you will be redirected to generate a token for Pulumi.</p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/fRfg2MFxn3nvSYZz1coaocoeFqrlJsOyXOyPfdCt2unCpYVMceLvDvN1neF-2GuBbsqN395FgLmah3Y9KL9sLqD-JO-EmF0SCDoIVgZl558r_Sbl74q7nSbj7zuFK1u0jpFdt8SnHWImLthCnGwMm7g"" width=""339"" height=""246""></p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/86OrrajMj-CM4zVSXtUCQLsedtAyZEi_MOSOn-FKz4qpQPYUfaxbopotKjYbYa9w2QTxMUZhm9DOqYJu1_O0VTf7WnBpOVcqcmG6DTPFX7NnL5JJf3o-lPrfmUWq4quN1KXOZsRGoFofNv-69-6hRfM"" width=""449"" height=""314""></p>



<p>Enter the name of your project. Next, you will be asked for a <strong>stack name</strong>. Hit ENTER to accept the default value of dev. </p>



<p><img decoding=""async"" src=""https://lh5.googleusercontent.com/tearT728BjJfQCxWiR8D92YwsSxQyOIkhtipay080c8l9zFufRABDDRlGelV95hQZl1AFjsJENUYxOI-zs1lMZyXcaqESE85_l4xIK5YSuzNXVVqr1RAQUypJP8STukGAbpJnJ-aFueMetuc7YRv1vo"" width=""523"" height=""191""></p>



<p>If you list the content, pulumi generated two files in this directory.</p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/4QFvu3fIiw1pyRS_uXUVKvZZgt2IzSbRm6zlae_9_9iEFNdzHWQ9D1QLCuO5pT92zW2GeibuML0ldbIy8OOAsW-URQ84sjYJGkEgWuh3cI0xtiRoNaTZphsdZGuljFWyo-_HIqV0icT57YjwVOkRUTE"" width=""380"" height=""43""></p>



<p>Pulumi.yaml defines both the project and the program that manages your stack resources.</p>



<p>Pulumi.dev.yaml contains configuration values for the stack you just initialized.</p>



<p>Open the pulumi.yaml file</p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/Pi-T1M9cC8T7a1PCVyP4fJL5QOXE7ILPA-Rh1NzfHUUvfpj65wBTxUSVkYZdrUaLMOKFLCvic7SpBpjq8uc6VqojCUN2jQ2IMybcPNAIJo42cf0EjldZaT6QoEUIoeg6hhvxTQIzgcYrp9V1ZalvrGY"" width=""469"" height=""195""></p>



<p>It contains a basic configuration file that has a snippet for an S3 bucket.</p>



<p>This Pulumi program creates a new S3 bucket and exports the name of the bucket.</p>



<p>Next, you’ll deploy your stack, which will provision your S3 bucket.</p>



<p>Type:</p>



<p><code>pulumi up</code></p>



<p><img decoding=""async"" src=""https://lh4.googleusercontent.com/lYYQTrrx6TfZM_f5P0CldryGs7rCO6ciBRO7dCushZVTB4qB5ynlKIdEOhApKXCjS6Nzd_eSSA25WUVu0SMhNs_W8EhTiBjXYPCTkPs3H_FVfqm7wIBCVxEn__iip8Rbr-bd5TtOM1nufaIUzsAG70M"" width=""624"" height=""295""></p>



<p>Once the preview is finished, you are given three options to choose from. Choosing details will show you a rich difference between the changes to be made. Selecting yes will create your new S3 bucket in AWS. Choosing no will return you to the user prompt without performing the update operation.</p>



<p>Go to Yes and hit ENTER</p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/RuZP-J-wu_iw8QAgWYajNBHzPVZinmjp17o0H7dgWMRcatasOmeYjQjB-ijxlACgS1xpUEyGipGMD4g9BIe5XAB6Q3aPeKsRpsmF8ELxHDhXufn7pY6dk74lESLrpLGNnSnRkQVYU8Qb7JORlQdJQq4"" width=""567"" height=""281""></p>



<p>A bucket named <strong>my-bucket-432ff1f</strong> is created.</p>



<p>You can also print the bucket name which is mentioned in the output section from the following command:</p>



<p><code>pulumi stack output bucketName</code></p>



<p>To add an object to your S3 bucket.</p>



<p><code>cat &lt;&lt;EOT &gt; index.html<br>&lt;html&gt;<br>   &lt;body&gt;<br>      &lt;h1&gt; Hello, Knoldus!! &lt;/h1&gt;<br>   &lt;/body&gt;<br> &lt;/html&gt;<br>EOT</code></p>



<p>Add the index.html section in the resource.</p>



<p><img decoding=""async"" src=""https://lh4.googleusercontent.com/M0bU0kMN5AMS0auYdVJgUTHw7Y7ExXvVbZkCVjCsyXAw1wL5O5ivFzvOLf-86HpZVtdNb9f_k3whQHYGdo0-fzhNQ81zRevCSLgcIrkwqja9S-dFIdj7txIBNM3U715qSwcD47e0_lsss5FyGNxMmPM"" width=""478"" height=""284""></p>



<p>Type:</p>



<p><code> pulumi up</code></p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/EjRdQc8B1Kat0v8W0wB6yGzhctT8jB8FNYf6ImdwD4f5J03BRGoSeJd5Zc9KZG3_xxuAGSetUT8FKSKwUdLvqwz_MRhySY-g33VGRF2BBjZp16Aqz6NnpAAnDi3gWyz73MVyJRc-nJY68KkJYv2ou3E"" width=""624"" height=""247""></p>



<p>Hit Enter</p>



<p><img decoding=""async"" src=""https://lh6.googleusercontent.com/xYph6_DQKVMl26XPrfrDif4R3uzPIvSu5Nm8tlyh55FwyR1I_XaTLEWFH2mmzoglI37yH24M3jVJTFyOv9wKdTfYxpFDOfXziWyETqqF3PsFbMsnoJoipUt70aebiomxpuAGJdn_Z9lSO_4TeyoPStA"" width=""624"" height=""267""></p>



<p>Now that your index.html is in your bucket, modify the program to have the bucket serve index.html as a static website. To do that, set the bucket’s website property, passing the filename to use as an indexDocument:</p>



<p class=""has-text-align-justify""><code>name: firstproject<br>runtime: yaml<br>description: A minimal AWS Pulumi YAML program<br>outputs:<br>  # Export the name of the bucket<br>  bucketName: ${my-bucket.id}<br>  bucketEndpoint: <a href=""http://$"" rel=""nofollow"">http://$</a>{my-bucket.websiteEndpoint}<br>resources:<br>  # Create an AWS resource (S3 Bucket)<br>my-bucket:<br>  type:  aws:s3:Bucket<br>  properties:<br>    website:<br>      indexDocument: index.html<br>index.html:<br>type: aws:s3:BucketObject<br>properties:<br>bucket: ${my-bucket}<br>source:<br> Fn::FileAsset: ./index.html<br>acl: public-read<br>contentType: text/html</code></p>



<p>Type:</p>



<p><code> pulumi up</code></p>



<p><img decoding=""async"" width=""624"" height=""299"" src=""https://lh6.googleusercontent.com/YrfyiEDSEfo8q-USqTCBzG40Ci3f1f4QCYlNcFYmJStWm5Yff3qjvlSDx5B7EktuA-Xd6vhAghCZ5bI51FTKI1tfBTU3WABH1GZ3ZNW7gPQKbXisdrARb_zwvIq0Ia4BCUdUt7Ka4XurDM3cOIIPiNY""></p>



<p>Hit Enter</p>



<p><img decoding=""async"" width=""624"" height=""296"" src=""https://lh5.googleusercontent.com/fpcxHHki3QXJHKfehqEPUR0pTPX2GJ-q18AP8_9bOUXwNETKXn7rSmaZl6dbGvYPP_MYtKF1X0TYNvl174VWGdJStvcB4R54HlsDrUe0hZ_g9rRhYLiKMIlTAbXIv2ifL2vJReS7N_uqcH5lXNJvVQc""></p>



<p>Finally, you can check out your new static website at the URL in the Outputs section of your update or you can make a curl request and see the contents of your index.html object printed out in your terminal.</p>



<p><code>curl $(pulumi stack output bucketEndpoint)</code></p>



<p><img decoding=""async"" width=""619"" height=""114"" src=""https://lh6.googleusercontent.com/raGmej_R7gtkn6GJGYtPCYUpAMO9PYxwFZC9SOMEsgT1TCSXZqrRDjHIyDlCEpVfE0hyUHD0h8ILp8NQtKoSco-cB32RafK7u-g99EFOG-a6xjFS7LFrgvO2AeNTKQ6ZREu-NSGpnjUiPEj3VQ134PM""></p>



<p>OR view the web page via URL</p>



<p><code>pulumi stack output bucketEndpoint</code></p>



<p><img decoding=""async"" width=""572"" height=""44"" src=""https://lh5.googleusercontent.com/S49tJ30IjtedpHxCsAaDIoJUeP9vvmktMR-CjaO-QWXZCpcBB2MlcHXQsC2jDDZ7ZTGLJd6IUjdwn0Iwyt-GgzQiRpjaOnsUcE0J4wDM6vwVngY4BY4jSQenidiQIkshKnhZop1_qkqVVtZRx4i5jpA""></p>



<p><img decoding=""async"" width=""624"" height=""237"" src=""https://lh6.googleusercontent.com/IByStJTCHSJ2M6CpBSnwRIFEWsJ6vGqNJq7wGGxgGcdkQyo2ID_DGpHoicKp8bJpzQZApP5_u-yczjGHFFzrm_yBEvNx2rdrlui5p5SIFh8J9jgujwKTN_dKQ7LGZFixrF6Z9sv0kRqiXE1W6PB4A7Q""></p>



<p>To destroy the stack, run : </p>



<p><code>pulumi destroy</code></p>



<p><img decoding=""async"" width=""624"" height=""292"" src=""https://lh4.googleusercontent.com/8pz6AqvV2Yvi0P-73eUIRc70gTNmTVYK7E12cC3b4OFzCF1halqzr71Zyp6J3mmXfJZo1S0NYQrJeTzFvFH1OeCJD4YcxLgt-ZkzK2GiZHgwtiwcC9jmu7fNpsGzvMxjgxTQp9OMZjLmFZaL_70pvKw""></p>



<p>Click Yes.</p>



<p>Your infrastructure is now destroyed successfully. <br>Plumi is very similar to any infrastructure as a code tool you might have come across. </p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Pulumi is an infrastructure as a Code tool that you can use to spin up any infrastructure-related components in the cloud or on-prem. In this blog, we will go through the steps involved in creating AWS service components using Pulumi. Pre-requisites AWS Access KeyAWS Secret KeyPulumi client Let&#8217;s create a new directory for our workloads. mkdir knolduscd knoldus Create a Pulumi stack pulumi new aws-yaml <a href=""https://blog.knoldus.com/using-pulumi-to-spin-up-an-s3-bucket/"" class=""more-link"">Continue Reading</a></p>
",Using Pulumi to spin up an S3 bucket - Knoldus Blogs,"In this blog, we will go through the steps involved in creating AWS service components (S3 bucket) using Pulumi.",Vidushi Bansal,"[['AWS', 'IaaC', 'pulumi']]",[['Studio-DevOps']]
189080,2023-03-05 19:11:16,https://blog.knoldus.com/resilience4j-circuit-breaker-with-spring-boot/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image is-style-rounded""><img decoding=""async"" src=""https://i0.wp.com/miro.medium.com/max/700/1*S6hvCsBqW0jv5ZekLCytJg.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<h2><strong>Resilence4j</strong></h2>



<p><a href=""https://resilience4j.readme.io/docs/getting-started"">Resilience4j</a> is a Java library that provides several resilience patterns for building fault-tolerant applications. It is designed to help developers write resilient, fault-tolerant, and scalable applications with minimal effort. Resilience4j is designed to be easy to use and integrate into the applications. It also provides a flexible configuration system that allows developers to customize the behavior of each resilience pattern to suit their specific needs.</p>



<h2><strong>What is Circuit Breaker</strong></h2>



<p id=""9d16"">This pattern allows developers to build fault-tolerant applications by preventing cascading failures in distributed systems. It monitors the status of a remote system and &#8220;breaks the circuit&#8221; when it detects a failure, preventing further requests from being sent to the system until it has recovered.</p>



<figure class=""wp-block-image is-style-default""><img decoding=""async"" src=""https://i0.wp.com/miro.medium.com/max/511/1*2H4m5Cz0Q6SC2PVDrWOS7g.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/><figcaption class=""wp-element-caption"">Circuit Breaker Flow Diagram</figcaption></figure>



<h3><strong>How to implement Resilience4j</strong></h3>



<p id=""de9d"">We need to add the dependency, and circuit breaker configuration to our service.</p>



<p id=""1f30""><strong>&nbsp;Add the below dependency in the pom.xml.</strong></p>



<pre class=""wp-block-code has-black-color has-text-color has-background"" style=""background:radial-gradient(rgb(255,206,236) 0%,rgb(152,150,240) 100%)""><code>&lt;dependency>

    &lt;groupId>io.github.resilience4j&lt;/groupId>

    &lt;artifactId>resilience4j-spring-boot2&lt;/artifactId>

    &lt;version>1.7.1&lt;/version>

&lt;/dependency></code></pre>



<p id=""c0cf""><strong>Configuration:&nbsp;</strong>We will configure the circuit breaker through the application.yml using the below configuration.</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>resilience4j:

  circuitbreaker:

    instances:

      service_A:

        registerHealthIndicator: true

        eventConsumerBufferSize: 10

        failureRateThreshold: 50

        minimumNumberOfCalls: 5

        automaticTransitionFromOpenToHalfOpenEnabled: true

        waitDurationInOpenState: 5s

        permittedNumberOfCallsInHalfOpenState: 3

        slidingWindowSize: 10

        slidingWindowType: COUNT_BASED</code></pre>



<p id=""4db4""><strong>Actuator Configuration:</strong>&nbsp;We will enable the circuit breaker actuator endpoint through the application.yml using the below configuration.</p>



<pre class=""wp-block-code has-black-color has-blush-light-purple-gradient-background has-text-color has-background""><code>management:

  health:

    circuitbreakers:

      enabled: true

  endpoints:

    web:

      exposure:

        include: health

  endpoint:

    health:

      show-details: always</code></pre>



<p id=""28d1"">After configuring the circuit breaker, you can check the health endpoints from the browser by the URL &#8220;<a href=""http://localhost:7070/actuator/health&#038;#8221"" rel=""nofollow"">http://localhost:7070/actuator/health&#038;#8221</a>;. In upstate, we will get state&nbsp;CLOSED. Please check below API Response.</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/m2XwLbph/Screenshot-from-2023-03-05-17-38-08.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p id=""9b1d"">In Half-open state &lt;Retry&gt;, state would be&nbsp;<strong><em>HALF_OPEN</em></strong></p>



<p id=""d76e"">In Open state &lt;Remote Api Down&gt;, the state would be&nbsp;<strong><em>OPEN</em></strong></p>



<p id=""08b3"">Now we will move to implement the circuit breaker in Our Micro Service API Call.<br>We will use&nbsp;<strong><em>@CircuitBreaker</em></strong>&nbsp;annotation followed by the&nbsp;<strong><em>name</em></strong>&nbsp;of the circuit breaker and&nbsp;<b><i>fallback method</i></b>.<br>fallback method: From the fallback method we will return the default response when the state is HALF_OPEN or OPEN.</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/m2CHqTx0/Screenshot-from-2023-03-05-17-44-09.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p id=""b8a1"">Note: Make sure the method annotated with<strong><em>&nbsp;@CircuitBreaker</em></strong>&nbsp;should not in the same class as the caller.</p>



<h2>References</h2>



<p><a href=""https://resilience4j.readme.io/docs/getting-started"">https://resilience4j.readme.io/docs/getting-started</a></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> Resilence4j Resilience4j is a Java library that provides several resilience patterns for building fault-tolerant applications. It is designed to help developers write resilient, fault-tolerant, and scalable applications with minimal effort. Resilience4j is designed to be easy to use and integrate into the applications. It also provides a flexible configuration system that allows developers to customize the behavior of each resilience pattern to suit their specific <a href=""https://blog.knoldus.com/resilience4j-circuit-breaker-with-spring-boot/"" class=""more-link"">Continue Reading</a></p>
",Resilience4j Circuit Breaker with Spring Boot - Knoldus Blogs,Resilience4j is a Java library that provides several resilience patterns for building fault-tolerant applications.,Deepak Kumar,[],"[['Java', 'spring boot']]"
188885,2023-03-05 8:12:13,https://blog.knoldus.com/introduction-to-resilience4j-what-it-is-and-how-to-use-it-with-examples/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large is-style-rounded""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/Px3XB3VL/res.png?w=640&#038;ssl=1"" alt=""Introduction To Resilience4j"" data-recalc-dims=""1""/></figure>



<p><a href=""https://resilience4j.readme.io/docs"">Resilience4j</a> is a library that helps to build resilient and fault-tolerant applications in Java. It provides an easy way to add fault tolerance to your existing code base and offers a wide range of features for better control over the failure-handling process. In this article, we will introduce Resilience4j and how it can be used with some examples. So let&#8217;s dive in!</p>



<h2><br>What is Resilience4j?</h2>



<p>Resilience4j is a lightweight, easy-to-use fault tolerance library for Java8 that can be used in any Java application. Resilience4j provides decorators and utilities that allow you to easily add resilience to your code. In this blog post, we&#8217;ll give you a brief overview of Resilience4j and how to use it. We&#8217;ll also provide some examples of how Resilience4j can be used to improve the resiliency of your code.</p>



<h2>Benefits of Using Resilience4j</h2>



<p>When it comes to dealing with failures, Resilience4j is a great tool to have in your toolkit. Resilience4j provides several advanced features for handling failures, such as:</p>



<ul>
<li><strong>Automatic Retries:</strong> Resilience4j will automatically retry failed attempts, up to a configurable number of times. This can be helpful in cases where transient errors are causing failures.</li>



<li><strong>Circuit Breaker:</strong> The circuit breaker feature can help prevent cascading failures by short-circuiting calls that are likely to fail. This can help improve the stability and availability of your system.</li>



<li><strong>Rate Limiting:</strong> Rate limiting can be used to control the rate at which requests are made to a downstream service. This can help prevent overloading the downstream service, and improve overall system performance.</li>
</ul>



<p>These are just some of the benefits that Resilience4j offers. In addition, Resilience4j is easy to use and integrates well with popular Java frameworks.</p>



<h2>How to Set Up and Configure Resilience4j?</h2>



<p>In order to use Resilience4j, you must first set it up and configure it. This can be done in a few simple steps:</p>



<p>1) Add the Resilience4j dependency to your project.</p>



<p>2) Configure Resilience4j by specifying the parameters that you want to use.</p>



<p>3) Use the Resilience4j API in your code to make your application more resilient.</p>



<p>Let&#8217;s take a closer look at each of these steps.</p>



<p>1) Adding the Resilience4j Dependency</p>



<p>The first step is to add the resilience4j-core dependency to your project. You can do this using Maven or Gradle. For example, with Maven you would add the following dependency to your pom.xml file:</p>



<pre class=""wp-block-code has-black-color has-cyan-bluish-gray-background-color has-text-color has-background""><code>io.github.resilience4j resilience4j-core 0.14.0</code></pre>



<p>Alternatively, if you are using Gradle, you would add the following dependency to your build.gradle file: compile <strong>&#8216;io.github.resilience4j:resilience4j-core:0.14&#8217;</strong> Once you have added the appropriate dependency for your build system, you are ready to move on to configuring Resilience4j.</p>



<h2>Examples of How to Implement Resilience4j<br></h2>



<p>There are many ways that you can integrate resilience into your applications using Resilience4j. In this section, we will provide some examples of how to do so.</p>



<ol>
<li>Resilience in Spring Boot Applications</li>
</ol>



<p>If you are using Spring Boot, you can easily add resilience features to your application by adding the following dependency to your project:</p>



<pre class=""wp-block-code has-black-color has-cyan-bluish-gray-background-color has-text-color has-background""><code>io.github.resilience4j resilience4j-spring-boot2 ${resilience4j.version}</code></pre>



<p>Once you have added the dependency, you can configure Resilience4j in your application.properties file:</p>



<pre class=""wp-block-code has-black-color has-cyan-bluish-gray-background-color has-text-color has-background""><code>resilience4j.circuitbreaker.configurations=mycircuitbreaker1, mycircuitbreaker2 </code></pre>



<p># Add comma-separated circuit breaker configurations here </p>



<pre class=""wp-block-code has-black-color has-cyan-bluish-gray-background-color has-text-color has-background""><code>resilience4j.ratelimiter.configurations=myratelimiter1, myratelimiter2 </code></pre>



<p># Add comma-separated rate limiter configurations here </p>



<pre class=""wp-block-code has-black-color has-cyan-bluish-gray-background-color has-text-color has-background""><code>resilience4j.bulkhead.configurations=mybulkhead1, mybulkhead2 </code></pre>



<p># need to add comma-separated bulkhead configurations here # You can also configure retry, cache, and timeout here …<br>Some of the most common configuration options are described below:</p>



<h2>Circuit Breaker: You can configure</h2>



<h3>Error Handling with Resilience4j</h3>



<p>Resilience4j is a lightweight, easy-to-use library for handling errors and recovering from failures. It is built on top of the Java 8 Functional Interface and uses the VAVR library to provide a rich set of tools for working with failures.</p>



<p>Resilience4j provides a number of features to help you deal with errors and failures:</p>



<p><strong>Retry</strong>: Automatically retry failed actions a configured number of times. This can be useful when dealing with transient errors that may eventually succeed if retried.</p>



<p><strong>Circuit Breaker:</strong> Stop performing an action if it consistently fails, and only allow it to be performed again after a period of time has passed. This can prevent cascading failures and help stabilize a system.</p>



<p><strong>Bulkhead</strong>: Limit the number of concurrent actions that are being performed at any given time. This can help prevent overloading a system and avoid head-of-line blocking.</p>



<p><strong>Timeout</strong>: Limit the amount of time that an action can take to complete before timing out and failing. This can help prevent runaway processes from hogging resources.</p>



<h2>Alternatives to Resilience4j</h2>



<p>There are many ways to add resilience and fault tolerance to your applications. Here are some popular alternatives to Resilience4j:</p>



<p>Hystrix is a library from Netflix that provides latency and fault tolerance for services.</p>



<p>Pivotal&#8217;s Circuit Breaker is another option for providing resilience to your applications.</p>



<p>The Bulkhead pattern is a common approach to adding resilience and can be implemented in many different ways.</p>



<p>Whatever approach you take, it&#8217;s important to have a plan for how your application will handle failures. Resilience4j is one tool that can help you achieve this goal.</p>



<h2>Conclusion</h2>



<p>In conclusion, resilience4j is a powerful and useful tool for developers who need to build resilient applications. It provides easy-to-use Java APIs that allow you to quickly add fault tolerance into your applications without having to write complex code. Resilience4j also has many features such as retry, circuit breaker, rate limiter, bulkhead, timeout, and cache that make it easier than ever before to ensure your application can handle any type of failure gracefully. So if you want to get started with resilience4j or just learn more about what it offers, we highly recommend taking the time to explore the framework and its documentation in depth.</p>



<p>for more please read: <a href=""https://blog.knoldus.com/introduction-to-resilience4j/"">Resilience4j</a></p>



<div class=""is-layout-flex wp-container-2 wp-block-columns"">
<div class=""is-layout-flow wp-block-column"" style=""flex-basis:100%"">
<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
</div>
</div>



<p></p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Resilience4j is a library that helps to build resilient and fault-tolerant applications in Java. It provides an easy way to add fault tolerance to your existing code base and offers a wide range of features for better control over the failure-handling process. In this article, we will introduce Resilience4j and how it can be used with some examples. So let&#8217;s dive in! What is Resilience4j? <a href=""https://blog.knoldus.com/introduction-to-resilience4j-what-it-is-and-how-to-use-it-with-examples/"" class=""more-link"">Continue Reading</a></p>
",Knoldus Blogs Java - Introduction To Resilience4j,Introduction To Resilience4j: Resilience4j is a library that helps to build resilient and fault-tolerant applications in Java.,Akshit Kumar,[['resilience4j']],"[['Java', 'Tech Blogs']]"
191263,2023-03-05 0:20:55,https://blog.knoldus.com/cloud-engineering-digital-tree-of-the-future/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Cloud Engineering has revolutionized the way businesses operate in recent times. It has allowed organisations to scale their infrastructure and services quickly and cost-effectively, improving their agility and responsiveness. However, moving to the cloud requires more than just signing up for an account with a cloud provider. It requires a comprehensive cloud engineering practice that considers various aspects of cloud adoption, including planning, design, deployment, operations, and security.</p>



<p>This blog will explore the critical elements of cloud engineering practice and discuss why they are essential for successful cloud adoption.</p>



<h2>1. <strong>Cloud Strategy and Planning</strong></h2>



<p><strong><br></strong>The first step in cloud engineering practice is to define a cloud strategy and develop a comprehensive plan for cloud adoption. This involves identifying the business objectives for moving to the cloud, determining the cloud deployment model (public, private, or hybrid), selecting a cloud provider, and defining a roadmap for migration.</p>



<p>A well-defined cloud strategy and plan can help organizations avoid potential pitfalls and ensure successful cloud adoption. It can also provide a clear understanding of the expected benefits of moving to the cloud, including cost savings, scalability, and agility.</p>



<h2>2. <strong>Cloud Architecture and Design</strong></h2>



<p><strong><br></strong>Once the cloud strategy and plan are in place, the next step is to design a cloud architecture that meets the organization&#8217;s requirements. Cloud architecture design involves identifying the applications and services that will be moved to the cloud, selecting the appropriate cloud deployment model, designing the cloud infrastructure, and defining the cloud service level agreements (SLAs).</p>



<p>The cloud architecture design should consider various factors such as scalability, availability, performance, security, and compliance. It should also incorporate best practices for cloud deployment, such as using containerization and microservices architecture to improve scalability and resilience.</p>



<h2>3. <strong>Cloud Deployment and Operations<br></strong></h2>



<p>After the cloud architecture is designed, the next step is to deploy and manage the cloud infrastructure. Cloud deployment involves setting up the cloud environment, configuring the cloud services, and migrating the applications and data to the cloud.</p>



<p>Cloud operations involve managing the cloud infrastructure, monitoring performance, and ensuring the availability of cloud services. Cloud operations also include maintaining the security and compliance of the cloud environment, managing access control, and performing regular backups and disaster recovery drills.</p>



<h2>4. <strong>Cloud Security and Compliance<br></strong></h2>



<p>Security and compliance are critical elements of cloud engineering practice. Moving to the cloud exposes organizations to new security risks, and compliance requirements can vary depending on the industry and geographic location.</p>



<p>Cloud security and compliance involve implementing security controls to protect the cloud environment, data, and applications from cyber threats. It also involves complying with various regulatory requirements, such as GDPR etc.</p>



<h2>5. <strong>Cloud Optimization and Cost Management</strong></h2>



<p><strong><br></strong>Cloud optimization and cost management are essential elements of cloud engineering practice. Cloud optimization involves identifying opportunities to improve the performance, scalability, and cost-effectiveness of the cloud infrastructure. Cloud cost management involves optimizing cloud usage and managing cloud expenditure to ensure that it aligns with the organization&#8217;s budget.</p>



<p>Cloud optimization and cost management can help organizations reduce the overall cost of cloud adoption while improving the efficiency and effectiveness of cloud operations.</p>



<p>In conclusion, cloud engineering practice is a comprehensive approach to cloud adoption that considers various aspects of cloud planning, design, deployment, operations, security, and cost management. A well-defined cloud engineering practice can help organizations avoid potential pitfalls and ensure a successful cloud adoption that aligns with their business objectives.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> Cloud Engineering has revolutionized the way businesses operate in recent times. It has allowed organisations to scale their infrastructure and services quickly and cost-effectively, improving their agility and responsiveness. However, moving to the cloud requires more than just signing up for an account with a cloud provider. It requires a comprehensive cloud engineering practice that considers various aspects of cloud adoption, including planning, design, deployment, <a href=""https://blog.knoldus.com/cloud-engineering-digital-tree-of-the-future/"" class=""more-link"">Continue Reading</a></p>
",Cloud Engineering - Digital Tree of the future - Knoldus Blogs,This blog will explore the critical elements of cloud engineering practice and discuss why they are essential for successful cloud adoption.,Rahul Miglani,[],[['Studio-DevOps']]
190845,2023-03-03 20:10:02,https://blog.knoldus.com/how-to-migrate-scala-2-13-project-to-scala-3/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">9</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p class=""has-text-align-justify"">Are you a Scala developer looking to migrate your existing Scala 2.13 projects to the latest version of the language? If so, you&#8217;ll be happy to know that Scala 3 is now available and comes with a range of new features and improvements. With its streamlined syntax, improved performance, and better compatibility with Java 8 and above, Scala 3 offers a host of benefits for developers working with the language.</p>



<p class=""has-text-align-justify"">However, migrating to a new major version of any programming language can be a daunting task, and Scala 3 is no exception. But don&#8217;t worry &#8211; we&#8217;ve got you covered. In this blog post, we&#8217;ll provide you with a step-by-step guide to help you migrate your projects from Scala 2.13 to Scala 3 using the Scala 3 Migrate Plugin. Whether you&#8217;re interested in the new features of Scala 3 or just looking to stay up-to-date with the latest version of the language, this guide is for you.</p>



<p>So, let&#8217;s get started and take your Scala development to the next level with Scala 3.</p>



<h2>Scala 3 Migrate Plugin</h2>



<p class=""has-text-align-justify"">The Scala 3 Migrate Plugin is a valuable tool that can help you migrate your codebase to Scala 3. It has been designed to make the migration to scala 3 as easy as possible. It provides a set of automated tools and manual suggestions to make the process as smooth and painless as possible. </p>



<p>The migration process consists of four independent steps that are packaged into an sbt plugin:</p>



<ol>
<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>migrate-libs:</strong> This step helps you update the list of library dependencies in your build file to use the corresponding Scala 3 versions of your dependencies. It ensures that your project&#8217;s dependencies are compatible with Scala 3 and can be resolved correctly during the build process</mark>.</li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>migrate-scalacOptions:</strong> This step helps you update the list of compiler options (<code>scalacOptions</code>) in your build file to use the corresponding Scala 3 options. It ensures that the compiler is using the correct set of options for Scala 3, which can help improve the quality and performance of your code.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>migrate-syntax:</strong> This step fixes a number of syntax incompatibilities in your Scala 2.13 code so that it can be compiled in Scala 3. It handles common syntax changes between the two versions of Scala and can help you quickly fix issues that would otherwise require significant manual changes.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>migrate:</strong> This step tries to make your code compile with Scala 3 by adding the minimum required inferred types and implicit arguments. It automates the process of making your code compatible with Scala 3 and can help you quickly identify issues that would otherwise require significant manual changes.</mark></li>
</ol>



<p>Each of these steps is an sbt command that we will understand in detail in the following sections. So make sure to run them in an sbt shell.</p>



<h2>Prerequisites</h2>



<p class=""has-text-align-justify has-black-color has-text-color"">Before using the <code><strong>scala3-migrate</strong></code> plugin, you&#8217;ll need to make sure that your development environment meets the following prerequisites:</p>



<ol>
<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>SBT 1.5 or later:</strong> You&#8217;ll need to be using SBT as your build tool, and have a version of 1.5 or later installed on your system.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>Java 8 or later:</strong> The <code>scala3-migrate</code> plugin requires Java 8 or later to run. Make sure it is installed on your system.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>Scala 2.13:</strong> The <code>scala3-migrate</code> plugin requires Scala 2.13(preferred 2.13.5) to work correctly. If you&#8217;re using an earlier version of Scala, you&#8217;ll need to upgrade first.</mark></li>
</ol>



<p class=""has-text-align-justify has-black-color has-text-color"">By ensuring that your development environment meets these prerequisites, you&#8217;ll be able to use the <code>scala3-migrate</code> plugin with confidence and make a smooth transition to Scala 3.</p>



<h2>Installation</h2>



<p>You can install the <code>scala3-migrate</code> plugin by adding it to your <em><code><strong>plugins.sbt</strong></code></em> file:</p>



<pre class=""wp-block-code""><code><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">addSbtPlugin(""ch.epfl.scala"" % ""sbt-scala3-migrate"" % ""0.5.1"")</mark></code></pre>



<h2>Choosing a Module to Migrate</h2>



<p><code>scala3-migrate</code> plugin operates on one module at a time.  So for projects with multiple modules, the first step is to choose the right one to migrate first. </p>



<p>Choosing the right module to migrate is an important first step in the process of migrating to Scala 3. Here are a few considerations to help you decide which module to migrate first:</p>



<ul>
<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>Start with a small module:</strong> Migrating a large codebase all at once can be overwhelming, so it&#8217;s best to start with a small, self-contained module that is easy to test and debug. This will allow you to gain confidence in the migration process before tackling larger and more complex modules.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>Choose a module with clear dependencies:</strong> Look for a module that has clear dependencies and is less likely to have complex interactions with other parts of your codebase. This will make it easier to identify any issues that arise during the migration process and ensure that you&#8217;re not introducing new bugs or breaking existing functionality.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>Select a module that uses fewer language features:</strong> Some Scala 2 language features have been removed or changed in Scala 3, so it&#8217;s best to start with a module that uses fewer of these features. This will make it easier to identify and fix any issues related to the changes in the language.</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color""><strong>Select a module that is actively developed:</strong> It&#8217;s a good idea to select a module that is currently under active development, as this will give you the opportunity to address any issues that arise during the migration process as part of your regular development workflow.</mark></li>
</ul>



<p>Consider these factors to choose a suitable module for migration and gain confidence before tackling more complex code.</p>



<h5><strong>Note</strong>: </h5>



<p>Make sure the module you choose is not an aggregate project, otherwise only its own sources will be migrated, not the sources of its subprojects.</p>



<h2>Migrate library dependencies </h2>



<p><strong>command:</strong> <code>migrate-libs projectId</code></p>



<p class=""has-text-align-justify"">Migrating library dependencies is an important step in upgrading a Scala 2.13 project to Scala 3. Library dependencies can include external packages, plugins, and other code that your project relies on. Fortunately, the <code>scala3-migrate</code> plugin provides the <code>migrate-libs projectId</code> command(where projectId is the name of the module chosen to be migrated), which can help you to update your library dependencies to be compatible with Scala 3.</p>



<p>Let&#8217;s consider the following sbt build that is supposed to be migrated:</p>



<div class=""is-layout-flow wp-block-group""><div class=""wp-block-group__inner-container"">
<pre class=""wp-block-preformatted""><code>//build.sbt
val akkaHttpVersion = ""10.2.4""
val akkaVersion = ""2.6.5""
val jdbcAndLiftJsonVersion = ""3.4.1""
val flywayCore = ""3.2.1""
val keycloakVersion = ""4.0.0.Final""

scapegoatVersion in ThisBuild := ""1.4.8""

lazy val ticketService = project
  .in(file("".""))
  .settings(
    name := ""ticket-service"",
    scalaVersion := ""2.13.6"",
    semanticdbEnabled := true,
    scalacOptions ++= Seq(""-explaintypes"", ""-Wunused""),
    libraryDependencies ++= Seq(
      ""com.typesafe.akka"" %% ""akka-http"" % akkaHttpVersion,
      ""com.typesafe.akka"" %% ""akka-stream"" % akkaVersion,
      ""net.liftweb"" %% ""lift-json"" % jdbcAndLiftJsonVersion,
      ""org.postgresql"" % ""postgresql"" % ""42.2.11"",
      ""org.scalikejdbc"" %% ""scalikejdbc"" % jdbcAndLiftJsonVersion,
      ""ch.qos.logback"" % ""logback-classic"" % ""1.2.3"",
      ""com.typesafe.scala-logging"" %% ""scala-logging"" % ""3.9.3"",
      ""ch.megard"" %% ""akka-http-cors"" % ""0.4.3"",
      ""org.apache.commons"" % ""commons-io"" % ""1.3.2"",
      ""org.fusesource.jansi"" % ""jansi"" % ""1.12"",
      ""com.google.api-client"" % ""google-api-client"" % ""1.30.9"",
      ""com.google.apis"" % ""google-api-services-sheets"" % ""v4-rev1-1.21.0"",
      ""com.google.apis"" % ""google-api-services-admin-directory"" % ""directory_v1-rev20191003-1.30.8"",
      ""com.google.oauth-client"" % ""google-oauth-client-jetty"" % ""1.30.5"",
      ""com.google.auth"" % ""google-auth-library-oauth2-http"" % ""1.3.0"",
      // test lib
      ""com.typesafe.akka"" %% ""akka-stream-testkit"" % akkaVersion % Test,
      ""com.typesafe.akka"" %% ""akka-http-testkit"" % akkaHttpVersion % Test,
      ""com.typesafe.akka"" %% ""akka-http-spray-json"" % akkaHttpVersion,
      ""org.scalatest"" %% ""scalatest"" % ""3.1.0"" % Test,
      ""org.mockito"" %% ""mockito-scala"" % ""1.11.4"" % Test,
      ""com.typesafe.akka"" %% ""akka-testkit"" % akkaVersion % Test,
      ""com.h2database"" % ""h2"" % ""1.4.196"",
      //flyway
      ""org.flywaydb"" % ""flyway-core"" % flywayCore,
      //swagger-akka-http
      ""com.github.swagger-akka-http"" %% ""swagger-akka-http"" % ""2.4.2"",
      ""com.github.swagger-akka-http"" %% ""swagger-scala-module"" % ""2.3.1"",
      //javax
      ""javax.ws.rs"" % ""javax.ws.rs-api"" % ""2.0.1"",
      ""org.keycloak"" % ""keycloak-core"" % keycloakVersion,
      ""org.keycloak"" % ""keycloak-adapter-core"" % keycloakVersion,
      ""com.github.jwt-scala"" %% ""jwt-circe"" % ""9.0.1"",
      ""org.jboss.logging"" % ""jboss-logging"" % ""3.3.0.Final"" % Runtime,
      ""org.keycloak"" % ""keycloak-admin-client"" % ""12.0.2"",
      ""com.rabbitmq"" % ""amqp-client"" % ""5.12.0"",
      ""org.apache.commons"" % ""commons-text"" % ""1.9"",
      ""org.typelevel"" %% ""cats-core"" % ""2.3.0""
    )
  )</code></pre>
</div></div>



<p>Next, we&#8217;ll run the command and see the output:</p>



<h3>Output</h3>



<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/www.linkpicture.com/q/Screenshot-from-2023-02-24-14-25-45.png?resize=640%2C256&#038;ssl=1"" alt="""" width=""640"" height=""256"" data-recalc-dims=""1"" /></figure>



<p>The output lists project dependencies with their current version and required Scala 3-compatible version.</p>



<p class=""has-text-align-justify"">The <strong>Valid</strong> status indicates that the current version of the dependency is compatible with Scala 3. In contrast, the <strong>X</strong> status indicates that the dependency is not compatible with the Scala 3 version. The <strong>To be updated</strong> status displays the latest Scala 3 compatible version of the dependency.</p>



<p class=""has-text-align-justify"">In the given result, it appears that several dependencies are already valid and doesn&#8217;t require any updates. However, some dependencies require a specific Scala 3 compatible version, while others cannot be updated to Scala 3 at all.</p>



<p class=""has-text-align-justify"">For example, <code><strong>com.sksamuel.scapegoat:scalac-scapegoat-plugin:1.4.8:provided</strong></code> is marked with an <strong>X</strong> status, indicating that it is not compatible with Scala 3 and you need to remove it and find an alternative for the same. Moreover, the output suggests that the dependency <code><strong>ch.megard:akka-http-cors:0.4.3</strong></code> should be updated to <code><strong>""ch.megard"" %% ""akka-http-cors"" % ""1.1.3""</strong></code>, as the latter version is compatible with Scala 3.</p>



<p class=""has-text-align-justify"">In addition, some dependencies have a <strong>cross</strong> label next to them, indicating that they need to be used with a specific cross-versioning scheme, as they are not fully compatible with Scala 3. For example, the <strong>net.liftweb:lift-json:3.4.1</strong> dependency needs to be used with the cross-versioning scheme <strong>CrossVersion.for3Use2_13</strong>, as it is only safe to use the 2.13 version if it&#8217;s inside an application.</p>



<p class=""has-text-align-justify"">Overall,  this output can help identify which dependencies to update or remove when migrating to Scala 3. By following this migration guide, you can ensure that all the dependencies in your project are compatible with Scala 3.</p>



<p class=""has-text-align-justify"">Once you have applied all the changes mentioned in the above output, run the <code>migrate-libs</code> command again. All project dependencies with <strong>Valid</strong> status indicate successful migration of library dependencies to Scala 3.</p>



<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/www.linkpicture.com/q/Screenshot-from-2023-02-24-16-21-12.png?resize=640%2C336&#038;ssl=1"" alt="""" width=""640"" height=""336"" data-recalc-dims=""1"" /></figure>



<h2>Migrate scalacOptions</h2>



<p><strong>command:</strong> <code>migrate-scalacOptions projectId</code></p>



<p class=""has-text-align-justify"">The next step for migration is to update the project&#8217;s Scala compiler options(<code>scalacOptions</code>) to work with Scala 3.</p>



<p class=""has-text-align-justify"">The Scala compiler options are flags that control the compiler&#8217;s behavior when passed to the Scala compiler. These flags can affect the code generation, optimization, and error reporting of the compiler.</p>



<p class=""has-text-align-justify"">In Scala 3, some of the compiler options have been renamed or removed, while others have been added. Therefore, it is important to review and update the <code>scalacOptions</code> when migrating from Scala 2.13 to Scala 3.</p>



<p class=""has-text-align-justify"">To perform this step, we&#8217;ll run the <code><code><strong>migrate-scalacOptions</strong></code></code> command which displays the following output:</p>



<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/www.linkpicture.com/q/Screenshot-from-2023-02-24-16-23-35.png?resize=640%2C331&#038;ssl=1"" alt="""" width=""640"" height=""331"" data-recalc-dims=""1"" /></figure>



<p class=""has-text-align-justify"">The output shows a list of <code>scalacOptions</code> that were found in the project and indicate whether each option is still valid, has been renamed, or is no longer available in Scala 3.</p>



<p class=""has-text-align-justify"">For instance, the line <strong>-Wunused -&gt; X</strong> indicates that the <strong>-Wunused</strong> option is not available in Scala 3 and needs to be removed. On the other hand, <strong>-explaintypes -&gt; -explain-types</strong> shows that the <strong>-explaintypes </strong>option has been renamed to <strong>-explain-types</strong> and can still be used in Scala 3. So you just need to rename this <code>scalacOption</code>.</p>



<p class=""has-text-align-justify""><a href=""https://scalacenter.github.io/scala-3-migration-guide/docs/tooling/scala-3-migrate-plugin.html#plugins-specific-scalacoptions""></a>Some <code>scalacOptions</code>&nbsp;are not set by you in the build file but by some sbt plugins. For example,&nbsp;<code>scala3-migrate</code>&nbsp;tool enables semanticdb in Scala 2, which adds&nbsp;<strong><code>-Yrangepos</code></strong> option. Here sbt will adapt the semanticdb options in Scala 3. Therefore, all the information specific to the sbt plugins displayed by&nbsp;<code>migrate-scalacOption</code>&nbsp;can be ignored if the previous step has been followed successfully.</p>



<p class=""has-text-align-justify"">Overall, the output is intended to help you identify which <code>scalacOptions</code> need to be updated or removed in order to migrate the project to Scala 3.</p>



<p>After applying the suggested changes, the updated <code>scalacOptions</code> in the build looks like this:</p>



<pre class=""wp-block-code""><code>scalacOptions ++=

      (if (scalaVersion.value.startsWith(""3""))

        Seq(""-explain-types"")

      else Seq(""-explaintypes"", ""-Wunused""))</code></pre>



<h2>Migrate the syntax</h2>



<p><strong>command:</strong> <code>migrate-syntax projectId</code></p>



<p class=""has-text-align-justify"">This step is to fix the syntax incompatibilities that may arise when migrating code from Scala 2.13 to Scala 3. An <strong>incompatibility</strong> is a piece of code that compiles in Scala 2.13 but does not compile in Scala 3. Migrating a code base involves finding and fixing all the incompatibilities of the source code.</p>



<p>The command <code>migrate-syntax</code> is used to perform this step and fixes a number of syntax incompatibilities by applying the following Scalafix rules:</p>



<ul>
<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">ProcedureSyntax</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">fix.scala213.ConstructorProcedureSyntax</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">fix.scala213.ExplicitNullaryEtaExpansion</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">fix.scala213.ParensAroundLambda</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">fix.scala213.ExplicitNonNullaryApply</mark></li>



<li><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">fix.scala213.Any2StringAdd</mark></li>
</ul>



<p>This command is very useful in making the syntax migration process more efficient and less error-prone. By automatically identifying and fixing syntax incompatibilities, time and effort are saved from manual code changes.</p>



<p>Note that the <code>migrate-syntax</code> command is not guaranteed to fix all syntax incompatibilities. It is still necessary to manually review and update any remaining issues that the tool may have missed.</p>



<p>Let&#8217;s run the command and check the output:</p>



<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/www.linkpicture.com/q/Screenshot-from-2023-02-24-17-52-39.png?resize=640%2C649&#038;ssl=1"" alt="""" width=""640"" height=""649"" data-recalc-dims=""1"" /></figure>



<p class=""has-text-align-justify"">The output displays a list of files that previously had syntax incompatibilities and are now fixed after running this command.</p>



<h2>Migrate the code: the final step</h2>



<p><strong>command:</strong> <code>migrate projectId</code></p>



<p>The final step in the migration process is to use the <code>migrate</code> command <mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-black-color"">to make your code compile with Scala 3.</mark></p>



<p>The new type inference algorithm in Scala 3 allows its compiler to infer a different type than Scala 2.13&#8217;s compiler. This command attempts to compile your code in Scala 3 by adding the minimum required inferred types and implicit arguments.</p>



<p>When you run the <code>migrate</code> command, it will generate a report that lists any errors or warnings encountered during the compilation process. This report identifies areas of your code needing modification for compatibility with Scala 3.</p>



<p>Overall, the <code>migrate</code> command is an essential tool for the final step in the migration process to Scala 3. It automatically identifies migration issues and ensures full compatibility with Scala 3.</p>



<p>Let&#8217;s run the command and see the output:</p>



<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://i0.wp.com/www.linkpicture.com/q/Screenshot-from-2023-03-02-17-09-41.png?resize=640%2C319&#038;ssl=1"" alt="""" width=""640"" height=""319"" data-recalc-dims=""1"" /></figure>



<p class=""has-text-align-justify"">The output indicates that the project has been successfully migrated to Scala 3.1.1. </p>



<p class=""has-text-align-justify"">If your project has multiple modules, repeat the same migration steps for each of them. Once you&#8217;ve finished migrating each module, remove the <code>scala3-migrate</code> plugin from your project and update the Scala version to 3.1.1(or add this version to <code>crossScalaVersions</code>).</p>



<h2>Conclusion</h2>



<p class=""has-text-align-justify"">In conclusion, the process of migrating a Scala 2.13 project to Scala 3 can be made much simpler with the use of the <code>scala3-migrate</code> plugin. The plugin automates many migration changes, such as syntax incompatibilities and updating deprecated code. It also provides helpful diagnostics and suggestions for manual changes that are needed. However, it is still important to manually review and test changes to ensure the project runs correctly after migration. Careful planning and attention to detail ensure a successful migration to Scala 3, providing access to new features and benefits.</p>



<p>That&#8217;s it for this blog post. I hope that the information provided has been helpful and informative. </p>



<p class=""has-text-align-justify"">Additionally, if you found this post valuable, please share it with your friends, and colleagues, or on social media. Sharing information is a great way to help others and build a community of like-minded individuals.</p>



<p class=""has-text-align-justify"">To access more fascinating articles on Scala or any other cutting-edge technologies, visit <a href=""https://blog.knoldus.com/"">Knoldus Blogs</a>.</p>



<p class=""has-text-align-justify"">Finally, remember to keep learning and growing. With the vast amount of information available today, there&#8217;s always something new to discover and explore. So keep an open mind, stay curious, and never stop seeking knowledge.</p>



<h2>References</h2>



<p><a href=""https://github.com/scalacenter/scala3-migrate"">scala3-migrate github</a></p>



<p><a href=""https://scalacenter.github.io/scala-3-migration-guide/docs/tooling/scala-3-migrate-plugin.html"">Scala 3 Migration Guide</a></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">9</span> <span class=""rt-label rt-postfix"">minutes</span></span> Are you a Scala developer looking to migrate your existing Scala 2.13 projects to the latest version of the language? If so, you&#8217;ll be happy to know that Scala 3 is now available and comes with a range of new features and improvements. With its streamlined syntax, improved performance, and better compatibility with Java 8 and above, Scala 3 offers a host of benefits for <a href=""https://blog.knoldus.com/how-to-migrate-scala-2-13-project-to-scala-3/"" class=""more-link"">Continue Reading</a></p>
",How to migrate Scala 2.13 project to Scala 3? - Knoldus Blogs,"Looking to upgrade your Scala codebase? Our latest blog post is your ultimate guide to seamlessly migrate your Scala 2.13 codebase to Scala 3. With our step-by-step approach, you can make the transition with ease. Don't wait, check it out now!",Prateek Gupta,"[['compatibility', 'Interoperability', 'Migration', 'scala3', 'Syntax changes', 'Tooling', 'Type System']]","[['scala', 'Studio-Scala', 'Tech Blogs']]"
189124,2023-03-02 23:30:57,https://blog.knoldus.com/getting-started-with-spring-boot-3-0/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">6</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large is-style-rounded""><img decoding=""async"" src=""https://i0.wp.com/i.ytimg.com/vi/VZnoGGlqA1o/maxresdefault.jpg?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<h2>Introduction</h2>



<p>Spring Boot is a popular framework for building web applications and microservices in Java. The latest version, Spring Boot 3, released in September 2021. And it brings a number of new features and improvements to the framework.</p>



<p>One of the main new features in Spring Boot 3 is support for Java 16. This means that developers can now take advantage of the latest features. It&#8217;s improvements in the Java language when building their applications.</p>



<p>Another notable improvement in Spring Boot 3 is the introduction of a new feature that is &#8220;AppStartup&#8221;. This feature allows developers to register callbacks that run at different stages of the application startup process. This can be useful for performing tasks such as initializing resources. Also checking for configuration errors before the application starts accepting requests.</p>



<p>In addition to these new features, Spring Boot 3 also includes a number of bug fixes and performance improvements. For example, the framework now uses a new algorithm for resolving dependencies. This results in faster startup times and lower memory usage.</p>



<p>Although the great feature of Spring Boot 3 is:</p>



<p>It is fully compatible with Spring 5, which means that developers can take advantage of the latest features.  Another is improvements in the Spring Framework without having to make any major changes to their code.</p>



<h3>This Major Version of Spring Boot 3.0 and How to Prepare for the Transformations?</h3>



<ul>
<li>Java 16 Support: The latest version of the Java language, Java 16, is now supported by Spring Boot 3.0. This means that you can use Java 16 features in your applications if you choose to upgrade to this version of Spring Boot.</li>



<li>Gradle 7 Support: Spring Boot 3.0 now supports Gradle 7, the latest version of the popular build tool. If you are using Gradle with Spring Boot, you may need to update your build configuration to work with the new version of Gradle.</li>



<li>Reactive Web Client: The new reactive web client in Spring Boot 3.0 allows you to perform HTTP requests in a reactive manner. This is a major change from the traditional blocking web client in previous versions of Spring Boot. You will need to update your code to use the new reactive web client if you want to take advantage of this feature.</li>



<li>Micrometer Metrics: Micrometer, is a popular monitoring and metrics library. It&#8217;s now included as the default metrics library in Spring Boot 3.0. If you were previously using another metrics library with Spring Boot, you will need to update your code to use Micrometer.</li>



<li>OAuth 2.0 Improvements: Spring Boot 3.0 includes improvements to the OAuth 2.0 support. It&#8217;s making it easier to secure your applications using this popular authentication and authorization protocol.</li>
</ul>



<h4>How to Proceed</h4>



<p>To prepare for these changes, you should familiarize yourself with the new features and improvements in Spring Boot 3.0. Also, the plan is to update your applications accordingly. It is also a good idea to test your applications with the new version of Spring Boot. Before deploying to production, ensure that everything works as expected. Additionally, you may want to consider updating any dependencies or libraries used by your application. As these may also need to update to be compatible with Spring Boot 3.0.</p>



<h3>Spring Boot 3 Dependency Upgrades</h3>



<p>In Spring Boot 3.0, several dependencies have been upgraded to their latest versions. Some of the notable upgrades include:</p>



<ol>
<li>Spring Framework: The underlying Spring Framework has been upgraded to version 5.4, which brings new features and improvements to the framework.</li>



<li>Gradle: Spring Boot 3.0 now supports Gradle 7, the latest version of the popular build tool.</li>



<li>Micrometer: Micrometer, a popular monitoring and metrics library, is now included as the default metrics library in Spring Boot 3.0.</li>



<li>Reactor: The reactive programming library Reactor has been upgraded to version 3.4, which brings new features and improvements to the reactive programming support in Spring Boot.</li>



<li>Jackson: The JSON processing library Jackson has been upgraded to version 2.12, which brings new features and improvements to the JSON serialization and deserialization capabilities in Spring Boot.</li>
</ol>



<p>These are just a few of the notable dependency upgrades in Spring Boot 3.0. If you are using any of these dependencies in your application, you may need to update your code. That could be compatible with the latest versions. It&#8217;s still a good idea to reevaluate the release notes. Upgrade guides for each dependency to understand the changes and any potential impact on your application.</p>



<h3>New Features In Spring Boot 3</h3>



<p>Spring Boot 3.0 is the latest version of the popular framework for building web applications and microservices in Java. It was released in September 2021 and includes several new features and improvements. Some of the notable new features in Spring Boot 3.0 are:</p>



<ol>
<li>Support for Java 16: Spring Boot 3.0 now supports the latest version of Java, which means developers can take advantage of the latest features and improvements in the Java language when building their applications.</li>



<li>AppStartup: Spring Boot 3.0 introduces a new feature called &#8220;AppStartup&#8221; that allows developers to register callbacks that are executed at different stages of the application startup process. This can be useful for performing tasks such as initializing resources or checking for configuration errors before the application starts accepting requests.</li>



<li>Faster startup times and lower memory usage: Spring Boot 3.0 uses a new algorithm for resolving dependencies which result in faster startup times and lower memory usage.</li>



<li>Compatible with Spring 5: Spring Boot 3.0 is fully compatible with Spring 5, which means developers can take advantage of the latest features and improvements in the Spring Framework without having to make any major changes to their code.</li>



<li>New Actuator endpoints: Spring Boot 3.0 adds new Actuator endpoints that allow you to monitor and manage your application more easily.</li>



<li>Improved Error Handling: Spring Boot 3.0 has improved error handling capabilities, which makes it easier to handle exceptions and provides more useful error messages to clients.</li>



<li>Improved Security: Spring Boot 3.0 includes several security improvements, such as better handling of cookies, improved support for OAuth2, and support for JSON Web Tokens (JWT)</li>



<li>Support for Kotlin: Spring Boot 3.0 now supports the Kotlin programming language which is a modern, statically typed language that runs on the JVM.</li>
</ol>



<h4>How to Proceed</h4>



<p>The main new features in Spring Boot 3.0 that can use in Java are related to the new AppStartup feature and the support for Java 16. Here are some examples of how these new features can used in your Java code:</p>



<ul>
<li>AppStartup: To use the AppStartup feature, you can create an implementation of the AppStartup interface and register it as a Spring bean. For example:</li>
</ul>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/3NMTWm40/Screenshot-from-2023-01-18-14-21-58.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<ul>
<li>Support for Java 16: To take advantage of the new features in Java 16, you can simply update the Java version in your build file and start using the new features in your code. For example, you can use the new &#8220;text blocks&#8221; feature to make it easier to write multi-line strings:</li>
</ul>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/SKqYYY95/Screenshot-from-2023-01-18-14-25-14.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<ul>
<li>Additionally, Spring Boot 3.0 also includes several new features. Like- improvements related to the Actuator endpoints, improved error handling, and improved security. For example, you can use the new Actuator endpoints to monitor and manage your application more easily.</li>
</ul>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/4NkcR0ds/Screenshot-from-2023-01-18-14-26-34.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<ul>
<li>You can also use the improved error handling to handle exceptions and provide more useful error messages to clients.</li>



<li> for example:</li>
</ul>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/rwkvBqxc/Screenshot-from-2023-01-18-14-16-15.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p>These are just a few examples of how you can use the new features. And improvements in Spring Boot 3.0 in your Java code.</p>



<h2>Summary</h2>



<p>Overall, Spring Boot 3 is a solid release that brings a number of new features and improvements to the framework. It is a great choice for building web applications and microservices in Java. Developers should consider upgrading to this version if they are currently using an older version of Spring Boot.</p>



<h2>References</h2>



<p><a href=""https://www.jrebel.com/blog/what-expect-spring-boot-3"">https://www.jrebel.com/blog/what-expect-spring-boot-3</a></p>



<p><a href=""https://adevait.com/java/spring-boot-3-0"">https://adevait.com/java/spring-boot-3-0</a></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">6</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction Spring Boot is a popular framework for building web applications and microservices in Java. The latest version, Spring Boot 3, released in September 2021. And it brings a number of new features and improvements to the framework. One of the main new features in Spring Boot 3 is support for Java 16. This means that developers can now take advantage of the latest features. <a href=""https://blog.knoldus.com/getting-started-with-spring-boot-3-0/"" class=""more-link"">Continue Reading</a></p>
",Getting started with Spring Boot 3.0 - Knoldus Blogs,Spring Boot is a popular framework for building web applications and microservices in Java. the latest version was released in Sep 2021.,Shashikant Tanti,[['springboot']],"[['Java', 'java11']]"
191194,2023-03-02 17:34:31,https://blog.knoldus.com/woman-an-empowered-being/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image is-style-default""><img decoding=""async"" src=""https://lh6.googleusercontent.com/nQq6s-Wmpfv5EkjNCX856xVt6gn6iwXZQ5dg0mWmVoKHGQBjSrf8R1AS0wMhB1AW9QjGPDPiRPxmqdcdApnAgX5O4k6NvnZ_YnorC1IL3xRfmTz34n_uXojs4CG0QksiSnm9hXijWnZNS_oSicffCKo"" alt="""" /></figure>



<p>I remember my grandfather telling stories to read <strong>Bhagavad Gita </strong>to learn about the significance of women in life.&nbsp;</p>



<p>A powerful verse from it states- Women are more capable of attaining enlightenment. They can achieve it when all the common manifest civility towards them. Taking his advice led me to recognize the presence of women in all walks of the entity.&nbsp;</p>



<p>Though celebrating beings does not necessarily require a specified date, the uniqueness of a woman on every level deserves recognition. Compare this if we find that woman stands out from the rest of the Homo sapiens, which is spectral.&nbsp;</p>



<p><strong>Significance of Women’s Day</strong> </p>



<p><strong><img decoding=""async"" src=""https://lh6.googleusercontent.com/X4pBluSuQuQfQefARsCTnFi7biTUcP-gjtdAbYEe5qTBSlVmzm02mNiFCGC5f7sGghXY7qvafrAYZOQU2ScqSA8BhiPkkDfxtDZG11bzyxbs0meRIyKGk7zCygo5EiIZ6HrTpKBXj52xEksag4nwQ8Q"" width=""300"" height=""300""></strong></p>



<p>International Women&#8217;s Day is a day to celebrate their social, economic, and political achievements. It reflects on their progress and demands gender equality. This day belongs to everyone who strongly believes that rights are equal irrespective of gender.</p>



<p>From Lords in Ancient Prehistoric times to Sigmas in the Modern world, we anticipate the companionship of women as they do not just matter but are Charismatic Gurus who add Spiritual Intelligence to one another. And it shall be found in the pages of historical and modern times.&nbsp;</p>



<p><strong>Giving Light to historical pages</strong></p>



<p>Women are transforming a community from a relatively autonomous society to a participant in the national economy. But it was not the case during the Medieval age. The historical analysis of the position of women shows that they did not share uniformity with men and held the position of wife, mother, sister, and artisan. It was the dark age for them and<strong> </strong>solely the property of their fathers, brothers, or husband. Those times underestimated the strength lying within and halted the potential to contribute. But as the needle of the clock is never constant, time did change!</p>



<p>As David once said- “One lie has the power to tarnish the truth”.&nbsp;</p>



<p><strong>Historical Evidence: Flip the page!</strong></p>



<p>Personalities like <strong>Chandbibi </strong>appeared on the ramparts of the fort of Ahmednagar dressed in male attire and put heart in the defenders against the powers of Akbar himself, saving the truth of ultimate power within a woman. And fingers of the billions will be countless if we may start quoting women setting the examples for the whole existence.</p>



<figure class=""wp-block-image""><img decoding=""async"" src=""https://lh4.googleusercontent.com/0dYco2G5axpRkU9ttW2DF5rOjcq6VDZu-cbm-4kqc1sgWs8tx2J7rJSqsrYKJfX-t04g7GFT0Ta63SylVRpTOKIYSF7eD6lhhF8xV7W4Re4EOIOEqJs1msWn_8Zg5_okpOrsAaSgNLZMjuR5Cz5VSL8"" alt="""" /></figure>



<p>From the political aspiration of Indira Gandhi to the sky intelligence of Avani Chaturvedi, the aeronautical skills of Kalpana Chawla to the social enthusiasm of Mother Teresa and every woman, they have bent the marks to prosperous humanity.&nbsp;</p>



<p><strong>Continuity and Perseverance.</strong></p>



<p>The United Nations Observance of IWD recognizes and celebrates women and girls, championing the advancement of transformative technology and digital education. And as a result of which, we have women heroes in primary and quinary sectors. International Women&#8217;s day enlightens the importance of women as an individual and offers them equal status.&nbsp;</p>



<p>This Women&#8217;s day, let us all come together and protect her rights and cherish their individuality as Universe has quoted- “When all the Lords in heaven collate Navratan in balanced portions, Signora transpires”.</p>



<p><strong>Happy Women&#8217;s day</strong></p>



<p></p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> I remember my grandfather telling stories to read Bhagavad Gita to learn about the significance of women in life.&nbsp; A powerful verse from it states- Women are more capable of attaining enlightenment. They can achieve it when all the common manifest civility towards them. Taking his advice led me to recognize the presence of women in all walks of the entity.&nbsp; Though celebrating beings does <a href=""https://blog.knoldus.com/woman-an-empowered-being/"" class=""more-link"">Continue Reading</a></p>
",Woman- An Empowered Being-Knoldus Blog,Women are more capable of attaining enlightenment. They can achieve it when all the common manifest civility towards them.,Tushar Chopra,"[['Empowerment', 'Equality', 'Women']]",[['Human Resource']]
189155,2023-03-02 14:20:43,https://blog.knoldus.com/an-expert-guide-text-compression-using-brotli-and-gzip-angular-in-2023/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p><a href=""https://dev.to/t/angular""></a>Hi folks, Welcome again! Hope you are doing well. I am thrilled to see you here. So today, we will talk about the compression of text-based resources in an <a href=""https://angular.io/"" target=""_blank"" rel=""noreferrer noopener"">Angular</a> project by operating it with brotli and Gzip.</p>


<div class=""wp-block-image"">
<figure class=""aligncenter size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/hvcShYHd/14205592952-215db016c8-o.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure></div>


<p>So, before talking about that part, let&#8217;s examine &#8220;What are Brotli and Gzip?&#8221;.</p>



<h2><strong>What is Brotli? In case you&#8217;ve never heard of it.</strong></h2>



<p>We can call Brotli an operation to compress the files and serve them to the user. It was discovered and developed by Google in the year 2013.&nbsp;</p>



<p>Also known as the successor to the well-known <a href=""https://refspecs.linuxfoundation.org/LSB_1.2.0/gLSB/gzip.html"" target=""_blank"" rel=""noreferrer noopener"">Gzip standard</a>.</p>



<p>I think there is no unique relationship between Brotli and Angular. Generally used to compress static data (like Text files). You can use it with other frontend libraries and frameworks like <a href=""https://reactjs.org/"" target=""_blank"" rel=""noreferrer noopener"">React</a> or <em><a href=""https://svelte.dev/"" target=""_blank"" rel=""noreferrer noopener"">Svelte</a></em>,<a href=""https://vuejs.org/"" target=""_blank"" rel=""noreferrer noopener"">Vue.js</a> and more.</p>



<p>But since you and I are <a href=""https://blog.knoldus.com/a-quick-introduction-to-micro-frontend/"" target=""_blank"" rel=""noreferrer noopener"">Angular lovers</a>, we&#8217;ll learn how to compress our files with Brotli and optimize our Project.</p>



<p>Also, as per my information, compression algorithms can significantly improve the overall bundle size of an application by at least 50%, thereby improving performance.</p>



<p>You may be wondering what kind of gains to expect. On average, you can expect JavaScript files compressed with Brotli to be roughly 15% smaller, HTML files to be around 20% smaller, and CSS files are approximately 16% smaller.</p>



<h2><strong>How to implement Brotli in Angular Project</strong></h2>



<p>Here are two ways to implement Brotli in an Angular project. The First way is quick or informal to implement, but the second way is elegant. You can use any of them at your convenience.</p>



<h3>1) The quick way</h3>



<p>To do this, add a post-build script to your package.json file. Here&#8217;s what it looks like, and please notice that you&#8217;ll have to set the dist directory in the post-build script since your environment is different from mine.</p>



<pre class=""wp-block-code""><code><strong>""scripts"": {
    ""ng"": ""ng"",
    ""start"": ""ng serve"",
    ""build"": ""ng build"",
    ""postbuild"": ""for i in $(find dist/my-application/ -type f -print); do brotli $i; done"",
    ""test"": ""ng test"",
    ""lint"": ""ng lint"",
    ""e2e"": ""ng e2e""
  }</strong></code></pre>



<p>Here&#8217;s the command used to run.</p>



<pre class=""wp-block-code""><code><strong>npm run build -- --prod</strong></code></pre>



<p>Once it has done with declaration and build, you&#8217;ll notice that it took every file in your build directory and created a compressed copy for that file.</p>



<p>This approach is speedy and has few requirements, so it might not be suitable for the environment. Because it works on the assumption that the brotli executable is already installed and available for use. It also assumes that the Project uses the NPM scripts to build the Angular Project.</p>



<h3>2) The Elegant way</h3>



<p>This way includes the build process, and we have to extend the builder when building the application. This allows us to add the additional plugin during the build process.</p>



<ul>
<li>&#8220;brotli-webpack-plugin&#8221; for Brotli files</li>



<li>&#8220;compression-webpack-plugin&#8221; for our Gzip files</li>
</ul>



<p>The first step is to run the below command to install the packages as dev dependencies.</p>



<pre class=""wp-block-code""><code><strong>npm install -D compression-webpack-plugin brotli-webpack-plugin</strong></code></pre>



<p>The second step is to create the webpack configuration by creating the <strong>custom-webpack.config.js</strong> file in the src directory that would run the plugins.</p>



<pre class=""wp-block-code""><code><strong>var BrotliPlugin = require('brotli-webpack-plugin');
module.exports = {
    plugins: &#91;
        new BrotliPlugin({
            asset: '&#91;path].br',
            threshold: 0,
            minRatio: 0.8,
        })
    ]
}</strong></code></pre>



<p>The third step is to run this install in the builder, which would allow us to add the additional webpack configuration.</p>



<pre class=""wp-block-code""><code><strong>npm i -D @angular-builders/custom-webpack</strong></code></pre>



<p>After that, In the angular.json file under the build, the property replaces the value of the builder property and adds a new property called options with its value as thus:</p>



<pre class=""wp-block-code""><code><strong>""architect"": {
        ""build"": {
          ""builder"": ""@angular-builders/custom-webpack:browser"",
          ""options"": {
            ""customWebpackConfig"": {
              ""path"": ""./webpack.config.js""
            },
          }
          ...
       }</strong></code></pre>



<p>Once the above steps are completed, run the ng build. If it runs successfully, go into the dist/projectName folder. You should find .br and .gz versions of all .js files, which should be significantly smaller.</p>



<p>Now, we have implemented Brotli in Angular Project in both ways. But if you got stuck or have any concerns while doing the same, connect with me!</p>



<p><strong>If you liked this blog, please share it with your friends and colleagues. Connect with FE studio on&nbsp;<a href=""https://www.linkedin.com/showcase/information-architecture-adaptive-user-interfaces/?viewAsMember=true"" target=""_blank"" rel=""noreferrer noopener"">LinkedIn</a>&nbsp;to read more about such topics.</strong></p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Hi folks, Welcome again! Hope you are doing well. I am thrilled to see you here. So today, we will talk about the compression of text-based resources in an Angular project by operating it with brotli and Gzip. So, before talking about that part, let&#8217;s examine &#8220;What are Brotli and Gzip?&#8221;. What is Brotli? In case you&#8217;ve never heard of it. We can call Brotli <a href=""https://blog.knoldus.com/an-expert-guide-text-compression-using-brotli-and-gzip-angular-in-2023/"" class=""more-link"">Continue Reading</a></p>
",An Expert Guide Text Compression Using Brotli and Gzip-(Angular in 2023),This blog is about the expert guide text compression using brotli and gzip in an Angular Project or any other framework/library.,Paras Jain,[],[['Studio-Scala']]
191020,2023-03-01 8:25:03,https://blog.knoldus.com/deep-dive-into-the-working-of-the-fold-operation-in-scala/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<h2>Introduction to &#8220;fold&#8221;</h2>



<p>&#8220;fold&#8221; is a common operation in programming languages including Scala where we essentially use it to &#8220;reduce&#8221; (note that &#8220;reduce&#8221; is also an operation in programming languages and has a special meaning in Scala as well). In this blog, we will learn how to use the fold function, understand different types of fold operations (including foldLeft and foldRight), and try to understand how it all works. Although fold operation can be applied on Option, Future, Try, etc.. but here we will understand it through List</p>
</div></div>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<h2>Definition of &#8220;fold&#8221;</h2>



<p>This is what the Scala docs say about the fold operation:</p>



<blockquote class=""wp-block-quote"">
<p>Folds the elements of this collection using the specified associative binary operator. The default implementation in IterableOnce is equivalent to foldLeft but may be overridden for more efficient traversal orders.<br>The order in which operations are performed on elements is unspecified and may be nondeterministic.</p>
</blockquote>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<p>Here is how it is defined in the Scala Collections library:</p>



<pre class=""wp-block-code""><code>// fold

def fold&#91;A1 &gt;: A](z: A1)(op: (A1, A1) =&gt; A1): A1 = foldLeft(z)(op)
  


// foldLeft

def foldLeft&#91;B](z: B)(op: (B, A) =&gt; B): B = this match {
    
    case seq: IndexedSeq&#91;A @unchecked] =&gt; foldl(seq, 0, z, op)
    
    case _ =&gt;

      var result = z

      val it = iterator

      while (it.hasNext) {

          result = op(result, it.next())

      }

      result
}


private&#91;this] def foldl&#91;B](seq: IndexedSeq&#91;A], start: Int, z: B, op: (B, A) =&gt; B): B = {
    
    @tailrec def loop(at: Int, end: Int, acc: B): B =
          
          if (at == end) acc
          
          else loop(at + 1, end, op(acc, seq(at)))
        
          loop(start, seq.length, z)
}



// foldRight

def foldRight&#91;B](z: B)(op: (A, B) =&gt; B): B = reversed.foldLeft(z)((b, a) =&gt; op(a, b))

// For internal use

protected def reversed: Iterable&#91;A] = {
    
    var xs: immutable.List&#91;A] = immutable.Nil

    val it = iterator

    while (it.hasNext) xs = it.next() :: xs

    xs
}</code></pre>
</div></div>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<p>Looking at the definition itself can teach us a lot about the working of the &#8220;fold&#8221; operation.</p>



<p>Some of the key takeaways from the above code are:</p>



<ol>
<li>fold and foldLeft are in fact synonymous. fold internally uses foldLeft operation</li>



<li>foldLeft operation distinguishes between an IndexedSeq and other subclasses Seq like LinearSeq. </li>



<li>IndexedSeq provides faster length operation. If we see the implementation of &#8220;foldl&#8221; method, we can see that we are leveraging the length operation to iterate over the Seq</li>



<li>&#8220;case _&#8221; is highlighting the fact that mutability is something that we cannot avoid completely. We not only use mutability but also &#8220;loop&#8221; over the Seq</li>



<li>Looking at foldRight operation, we can see that it is doing a foldLeft operation on the reversed Seq</li>



<li>Looking at &#8220;foldl&#8221; method one will intuitively feel a similar &#8220;foldr&#8221; method for foldRight. But that is not the case. Note that we do have a &#8220;foldr&#8221; method but Scala standard library uses it in the reduceRight operation</li>
</ol>
</div></div>
</div></div>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<p></p>
</div></div>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<h2>Illustration of fold (foldLeft) &amp; foldRight</h2>



<pre class=""wp-block-code""><code>@ val list = List(1, 2, 3, 4) 

list: List&#91;Int] = List(1, 2, 3, 4)


@ list.foldLeft(""a"")(_ + _.toString) 

res12: String = ""a1234""


@ list.foldRight(""a"")(_ + _.toString) 

res13: String = ""1234a""
</code></pre>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/www.linkpicture.com/q/foldLeft-foldRight_1.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>
</div></div>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<h2>Conclusion</h2>



<p>The fold operation is used a lot in production codes. One such common use case in case of an e-commerce website, we would use the fold operation to calculate the sum of all the prices of the items ordered by the customer. </p>



<p>Note that the fold operations are not restricted to Sequences and are applicable to other monads as well as mentioned in the introduction. </p>



<p>I hope the readers gain a better understanding of &#8220;folding&#8221; works internally in Scala and would urge them to keep exploring it as this will help them a lot in their development journey.</p>
</div></div>



<p>References: <a href=""http://allaboutscala.com/tutorials/chapter-8-beginner-tutorial-using-scala-collection-functions/scala-fold-example/"" target=""_blank"" rel=""noreferrer noopener"">AllAboutScala</a> (A detailed example)</p>



<div class=""is-layout-constrained wp-block-group""><div class=""wp-block-group__inner-container"">
<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
</div></div>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">3</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction to &#8220;fold&#8221; &#8220;fold&#8221; is a common operation in programming languages including Scala where we essentially use it to &#8220;reduce&#8221; (note that &#8220;reduce&#8221; is also an operation in programming languages and has a special meaning in Scala as well). In this blog, we will learn how to use the fold function, understand different types of fold operations (including foldLeft and foldRight), and try to understand <a href=""https://blog.knoldus.com/deep-dive-into-the-working-of-the-fold-operation-in-scala/"" class=""more-link"">Continue Reading</a></p>
","Deep dive into the working of the ""fold"" operation in Scala - Knoldus Blogs",This blog intends to make the readers understand how fold operation works in Scala though an illustration on Scala Lists,Prakhar,[],[['Studio-Scala']]
191103,2023-03-01 5:13:53,https://blog.knoldus.com/batching-in-reactive-streams/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Reactive streams support infinite data and handle backpressure. What if we want to perform a batch operation on top of the reactive stream. Can we batch over the infinite stream? In this blog, we will see how we can batch with Project Reactor reactive stream without breaking the streaming boundary and with handling the backpressure. </p>



<h2 class=""wp-block-heading"">The Problem Space</h2>



<p>In my project, one of the Microservice&#8217;s primary tasks is to index documents in Elasticsearch.  It is currently accepting the following stream of requests and indexes them one by one by calling the elastic search client. </p>



<pre class=""wp-block-code""><code>Flux&lt;ElasticResponse&gt; indexInElasticSearcch(Flux&lt;IndexRequest&gt; requestFlux) { // code goes here } </code></pre>



<p>As an optimization, we want to increase the indexing speed by leveraging the elastic search <a href=""https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-bulk.html"">bulk API,</a> which accepts a list of documents at once and indexes it in one go. As a result, we get a faster indexing speed. The challenge here is that we don&#8217;t want to collect the <code>Flux&lt;IndexRequest></code> into a list of <code>List&lt;IndexRequest></code> as it would break the streaming boundary and the backpressure support won&#8217;t be there. Look at the example snippet below to solve the problem: </p>



<pre class=""wp-block-code""><code>Flux&lt;ElasticResponse&gt; indexInElasticSearcch(Flux&lt;IndexRequest&gt; requestFlux) {

//make a list of indexRequest  
List&lt;IndexRequest&gt; indexRequests = requestFlux.publishOn(scheduler).collect(Collection.toList)  

//send it ot elasticsearch bulk client
esclient.bulkAsync(indexRequests)         
} </code></pre>



<p>The above code snippet will break the streaming boundary as the first statement will wait for all the elements in the Flux of request to be completed.  We never know the document size might be in millions which will overwhelm the memory of JVM. </p>



<h2 class=""wp-block-heading"">Solution &#8211; Using buffer in the Flux class</h2>



<p>One of the approaches to solve this is using the buffer method provided by the Reactor Library in the class <code>Flux</code> </p>



<pre class=""wp-block-code""><code></code></pre>



<figure class=""wp-block-image size-large""><a href=""https://knoldermanish.files.wordpress.com/2023/02/screenshot-2023-02-28-at-5.06.34-pm.png""><img decoding=""async"" src=""https://knoldermanish.files.wordpress.com/2023/02/screenshot-2023-02-28-at-5.06.34-pm.png?w=640"" alt="""" class=""wp-image-1696"" data-recalc-dims=""1""/></a></figure>



<p>As per the documentation of the method above, this will emit the results in the required batch size in the List as soon as the buffer size is equal to <code>maxSize</code>.  This will happen within the boundary of the stream. The data will be served gracefully because we are not performing <code>collect</code> on the entire Flux at once. Let us look at the bulk indexing use case again: </p>



<pre class=""wp-block-code""><code>Flux&lt;ElasticResponse&gt; indexInElasticSearcch(Flux&lt;IndexRequest&gt; requestFlux) {

//make a list of indexRequest  
Flux&lt;IndexRequest&gt; indexResponse = requestFlux
                                   .publishOn(scheduler)
                                   .buffer(BATCH_SIZE)
                                   .map(esclient::bulkAsync) //Dummy request for bulk Elasticsear client taking List&lt;IndexRequest&gt; as input
         
}</code></pre>



<p>There might be many different approaches to solving the above, and I would appreciate any discussion around simplifying the above problem or solving it in a different way! Hope it helped! </p>



<h2>References: </h2>



<ul>
<li><a href=""https://projectreactor.io/docs/core/release/reference/"">Project Reactor Reference</a></li>



<li><a href=""https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-bulk.html"">Elaticsearch </a>bulk indexing</li>
</ul>



<figure class=""wp-block-image size-full""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?ssl=1""><img data-attachment-id=""185343"" data-permalink=""https://blog.knoldus.com/swapping-two-array-elements-in-javascript/blog-footer-10/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?fit=1024%2C743&amp;ssl=1"" data-orig-size=""1024,743"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""blog-footer"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-185343"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?w=1024&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/11/blog-footer.webp?resize=768%2C557&amp;ssl=1 768w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> Reactive streams support infinite data and handle backpressure. What if we want to perform a batch operation on top of the reactive stream. Can we batch over the infinite stream? In this blog, we will see how we can batch with Project Reactor reactive stream without breaking the streaming boundary and with handling the backpressure. The Problem Space In my project, one of the Microservice&#8217;s <a href=""https://blog.knoldus.com/batching-in-reactive-streams/"" class=""more-link"">Continue Reading</a></p>
",Batch Operations in Reactive Stream - Using buffer with Project Reactor - Knoldus Blogs,"This blog will tell about how to perform batch operations in reactive stream, more specifically the Flux.",Manish Mishra,[['reactive streams']],"[['Java', 'reactive programing', 'Reactive Programming']]"
190768,2023-03-01 0:14:03,https://blog.knoldus.com/reactive-vs-imperative-programming/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<h4>Introduction</h4>



<p>A few years ago Reactive Programming was introduced as an improvement upon the imperative programming paradigm. It provides some important advantages over the imperative way by relying on <strong>asynchronous</strong> programming. These days we see a lot of enterprise applications use the reactive way but still, there are ones using the imperative approach. In this blog, we will try to explore what are the differences between reactive and imperative programming what are their use cases and what are the advantages/disadvantages of these programming paradigms.</p>



<h4>Imperative Paradigm</h4>



<p>Imperative programming is&nbsp;a software development paradigm that focuses on on solving a problem by performing a sequence of steps. In imperative programming, the code specifies how the problem is to be solved by executing steps that change the program&#8217;s state. For example, assigning values to variables, controlling the flow of execution with loops and conditionals, and calling functions to perform specific tasks. Imperative programming focuses on describing <strong>how</strong> a program should work to solve a problem or acheive a desired result.</p>



<h5>Advantages </h5>



<ol>
<li>Easy to Learn: Imperative programming is basically the way we think in real world about how to solve our problems hence it is usually easier to learn for beginners than other programming paradigms, as we are a;ready used to solving problems in this way.</li>



<li>Precise Control: Imperative programming allows for precise control over the flow of a program which is essential for systems which require very high efficiency.</li>



<li>Efficiency: Imperative programming languages are good for compute intensive tasks as they can be highly optimized which allows the system to acheive high performance.</li>



<li>Low-level Programming: Imperative programming is mostly used in low-level programming, like kernels or device drivers, because it provides provides high level of control over the hardware. Communication between hardware and drivers can be highly optimized with the help of these languages.</li>
</ol>



<h5>Disadvantages </h5>



<ol>
<li>Limited Abstraction: It is difficult to acheive abstraction in imperative programming. This makes it difficult to design larger complex system as it&#8217;s availability is highly compromized due to limited abstraction of errors/issues.</li>



<li>Prone to Errors: The close relationship between program flow and program state makes it more prone to errors and bugs in larger complex systems</li>



<li>More Code: Imperative programming usually requires a lot more lines of code than other paradigms, which leads to very high amounts of boilerplate code that can be difficult to manage in large complex systems.</li>



<li>Difficult to Parallelize: Imperative programming is difficult to parallelize, which is highly disadvantageous for distributed systems as it compromises on concurrency.</li>
</ol>



<h4>Reactive Paradigm</h4>



<p> Reactive programming is a programming paradigm that focuses on the flow of data and how it changes over time. It is based on event-driven programming concept where data streams get processed asynchronously i.e. when they arrive. <strong>ReactiveX</strong> is a software library&nbsp;that aims to provide reactive programming concept to various programming languages. It provides the advantages of the Observer pattern, the Iterator pattern, and functional programming. There are libraries from different languages based on ReactiveX such as RxJava, RxJS, Rx.NET, RxScala, etc.</p>



<h5>Properties of Reactive systems</h5>



<p>According to <strong>The&nbsp;Reactive&nbsp;Manifesto,</strong> a reactive system is designed to be:</p>



<p><strong>Responsive:&nbsp;</strong> Responsive systems focus on providing rapid and consistent response times. This consistent behavior builds end user confidence and encourages further interaction.</p>



<p><strong>Resilient:&nbsp;</strong>Failures are contained within each&nbsp;component, isolating components from each other and thereby ensuring that parts of the system can fail and recover without compromising the system as a whole. This ensures high availability of the system.</p>



<p><strong>Elastic:&nbsp;</strong>Reactive Systems stay responsive and can react to changes in the input rate by increasing or decreasing the&nbsp;resources&nbsp;allocated to service these inputs. This feature helps in high scalability.</p>



<p><strong>Message/Event Driven:&nbsp;</strong>Reactive Systems rely on&nbsp;asynchronous&nbsp;message-passing&nbsp;to establish a boundary between components that ensures loose coupling, isolation, and&nbsp;location transparency. Non-blocking&nbsp;communication allows recipients to only consume&nbsp;resources&nbsp;when actively triggered(by a call/message/event). This ensures less system overhead and in-turn better performance.</p>



<h5>Disadvantages </h5>



<p>Reactive programming has some potential disadvantages that developers need to consider when using it. Here are some of them:</p>



<ol>
<li>Steep Learning Curve: Reactive programming involves a fundamentally different way of thinking about programming than traditional imperative programming. It requires developers to think about streams of data and how to react to them in real time.</li>



<li>Debugging and Testing Complexity: As events are processed asynchronously, it can be challenging to trace the sequence of events that led to a problem. Moreover, the complex interactions between events, subscribers, and publishers can make it difficult to write comprehensive test cases.</li>



<li>Performance Overhead: Reactive programming can introduce some performance overhead due to the need to manage and coordinate streams of data which is most noticeable in applications that involve a high volume of data or a large number of subscribers.</li>



<li>Complex Data Flow: In reactive programming, data flows can become quite complex, especially as applications become larger and more complex. This can make it difficult to reason about the behavior of the system and maintain it over time.</li>



<li>Resource Consumption: Reactive programming can consume a significant amount of resources, especially in applications that process a large number of events or that require real-time responsiveness.</li>
</ol>



<h4>Use Cases</h4>



<p><strong>Imperative:</strong> This programming paradigm is useful when you want to perform a series of tasks in a specific order, and when you need to control the exact flow of data and control structures. Imperative programming is used in procedural languages like C, Python, and Ruby.</p>



<p><strong>Reactive:</strong> This programming paradigm is useful when you need to deal with large streams of data that are constantly changing, such as data from sensors or user inputs. Reactive programmingis used when you need to react to changes in real time. Reactive programming is used in languages like Java, JavaScript, and Scala.</p>



<h4>Conclusion </h4>



<p>In this blog we learned the imperative and reactive way of programming and when to use them as well as their differences in approach. For more such informative tech blogs keep following <a href=""https://blog.knoldus.com/"">Knoldus Blogs</a>.</p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction A few years ago Reactive Programming was introduced as an improvement upon the imperative programming paradigm. It provides some important advantages over the imperative way by relying on asynchronous programming. These days we see a lot of enterprise applications use the reactive way but still, there are ones using the imperative approach. In this blog, we will try to explore what are the differences <a href=""https://blog.knoldus.com/reactive-vs-imperative-programming/"" class=""more-link"">Continue Reading</a></p>
",Reactive vs Imperative Programming - Knoldus Blogs,"Reading Time: 4 minutes Introduction A few years ago Reactive Programming was introduced as an improvement upon the imperative programming paradigm. It provides some important advantages over the imperative way by relying on asynchronous programming. These days we see a lot of enterprise applications use the reactive way but still, there are ones using the imperative approach. In this blog, we will try to explore what are the differences Continue Reading",Agnibhas Chattopadhyay,"[['java', 'Reactive Programming']]","[['Java', 'Reactive Application', 'Reactive Architecture', 'Reactive Programming', 'Tech Blogs']]"
190769,2023-02-28 15:14:46,https://blog.knoldus.com/reactive-programming-what-is-it-and-why-we-need-it/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/developer.okta.com/assets-jekyll/blog/reactive-java-microservices/reactive-java-microservices-6103a3bb572a2c6cc3e4b5357cbde53953c5b53cbf82b673dda40fef053bf30b.png?w=640&#038;ssl=1"" alt=""Reactive Programming"" data-recalc-dims=""1""/><figcaption class=""wp-element-caption"">(The above image is courtesy of https:developer.okta.com, We don&#8217;t claim its Ownership, it is used for demonstration purposes only.)</figcaption></figure>



<h2>Introduction</h2>



<p>Reactive Programming is a paradigm that helps developers write event-driven applications by using observable streams of data. It&#8217;s often used in modern applications, especially on mobile devices and the web. In this article, we&#8217;ll explain what is and why we need it. We&#8217;ll also look at some of its benefits. And limitations so you can decide if it&#8217;s right for your project or not!</p>



<p>It is a style of software development. Used to aims to make it easier to write code that reacts to changes in data.</p>



<p>In this article, we will look at what reactive programming is and why it has become so popular. We&#8217;ll also look at some of the benefits and limitations of reactive programming.</p>



<h2>How does Reactive Programming work?</h2>



<p>Reactive Programming is a paradigm shift from the current programming model. It&#8217;s a response to the demands of modern-day software development. Systems have become more complex and require greater flexibility in order to evolve with changing requirements.</p>



<p>Reactive Programming is based on the concept of events, which are triggered by data changes or user interactions. These events are processed by event handlers which can send out new messages asynchronously without blocking other parts of your application code while waiting for responses from those handlers (i.e., they&#8217;re &#8220;reactive&#8221;).</p>



<h2>Reactive Programming vs Reactive Streams</h2>



<p>The first one is a superset of reactive streams. Reactive streams are standard for asynchronous data streams, which means they&#8217;re a way of ensuring that the processing of your code doesn&#8217;t get stuck waiting for slow data sources like HTTP requests or database queries to complete.</p>



<p>When we talk about &#8220;reactive&#8221; in this article, we&#8217;re referring specifically to Reactive Programming&#8211;a paradigm that makes it easier for developers and programmers alike to write code that reacts appropriately when something changes or happens unexpectedly (for example, when an error occurs).</p>



<p>Reactive Programming isn&#8217;t just about reacting: it&#8217;s also about being responsive and resilient in response to external stimuli (like user input).</p>



<h2>Observable and Observers</h2>



<p>In this programming, an Observable is a data source and an Observer is the consumer of the data. The Observable emits items to its Observers which can be added and removed dynamically during runtime. Each Observer can subscribe to one or more Observables, so there can be multiple Observers subscribed to each observable. This allows us to easily create asynchronous event buses in our applications by having multiple listeners that react when something happens on the bus (like an event).</p>



<p>The number of observers can go up and down during the lifetime of an observable object &#8211; this means you don&#8217;t have to worry about synchronizing threads or cleaning up resources because everything will happen automatically when needed!</p>



<h2>Schedulers</h2>



<p>Schedulers are used to execute tasks in a specific order. They&#8217;re also used to execute tasks on a specific thread, in the background, asynchronously, and more.</p>



<p>Schedulers have several uses:</p>



<ul>
<li>Execute tasks sequentially or parallel (depending on your requirements)</li>



<li>Run tasks based on schedules (e.g., every minute)</li>



<li>Timeout for executing long-running operations</li>
</ul>



<h2>Responsive, Resilient, and Elastic</h2>



<p>Reactive programming is responsive, resilient, and elastic.</p>



<ul>
<li>Responsive: Reactive programming is responsive in the sense that it responds to changes in the environment. It can handle multiple requests concurrently and gracefully degrade when there are too many requests being made at once. This makes it ideal for writing code that will work well on mobile devices. Or used on a web server with thousands of concurrent users accessing your website at once!</li>



<li>Resilient: You should expect errors from time to time but with reactive programming, you won&#8217;t have to worry about whether or not your application will crash because of one error &#8211; it&#8217;ll just keep chugging along until another error happens (or until all errors are resolved). This means that even if something goes wrong during execution, we don&#8217;t have to worry about our code crashing completely because each operation runs independently from one another which makes debugging easier than ever before!</li>
</ul>



<h2>Benefits of Reactive Programming</h2>



<p>It is a programming paradigm that is based on the concept of data streams. It has many benefits, including:</p>



<ul>
<li>Reactive Programming can be used in a wide variety of systems and applications, including real-time systems, asynchronous systems, event-driven systems, and more.</li>



<li>It&#8217;s fast and efficient because it uses asynchronous processing techniques to minimize latency (the time between when an event happens and when your program responds).</li>
</ul>



<h2>Limitations of Reactive Programming</h2>



<p>Reactive programming is not a silver bullet. It&#8217;s not a replacement for imperative programming, nor does it support stateful operations. In fact, reactive programming is just one part of the solution to building highly responsive applications that can handle millions of users on low-power devices and still perform well in real-time.</p>



<p>It&#8217;s not even really new&#8211;it simply uses some concepts from functional programming and applies them in an interesting way to make your code more readable and maintainable than ever before!</p>



<h2>Is Reactive Programming the future?</h2>



<p>Reactive Programming is not the future. It&#8217;s here and now.</p>



<p>Reactive Programming is a paradigm that allows you to write code that is more predictable, more responsive, more resilient, and elastic. It solves problems that have plagued developers for decades by introducing concepts such as asynchronous data streams (think RxJava), functional programming (think Kotlin), and domain-driven design (think Spring Boot).</p>



<h2>Conclusion</h2>



<p>This is a powerful tool that has the potential to change how we build software. But it&#8217;s not just about making things faster or more accessible, it&#8217;s about building better software that is more responsive, resilient, and elastic.</p>



<p>For More Info you can refer to our Blogs and official site:<br>1)&nbsp;<a href=""https://blog.knoldus.com/basics-of-reactive-programming/"" target=""_blank"" rel=""noreferrer noopener"">Basic Concepts of Reactive Programming.</a><br>2)&nbsp;<a href=""https://spring.io/guides/gs/reactive-rest-service/"" target=""_blank"" rel=""noreferrer noopener"">Reactive Programming With SpringBoot3.</a></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction Reactive Programming is a paradigm that helps developers write event-driven applications by using observable streams of data. It&#8217;s often used in modern applications, especially on mobile devices and the web. In this article, we&#8217;ll explain what is and why we need it. We&#8217;ll also look at some of its benefits. And limitations so you can decide if it&#8217;s right for your project or not! <a href=""https://blog.knoldus.com/reactive-programming-what-is-it-and-why-we-need-it/"" class=""more-link"">Continue Reading</a></p>
",Reactive Programming: What is it And Why We Need It - Knoldus Blogs,"Reactive programming is about building asynchronous, non-blocking, and event-driven applications that can easily scale.",Saurabh Suresh Dhotre,[],"[['Java', 'java11', 'reactive programing', 'Reactive Programming', 'Studio-Scala', 'Tech Blogs']]"
188850,2023-02-27 17:07:55,https://blog.knoldus.com/resilience4j-getting-started-with-circuit-breaker/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<figure class=""wp-block-image size-large is-resized""><img decoding=""async"" src=""https://repository-images.githubusercontent.com/36793280/5eec9480-8c3c-11e9-8069-5fc3e01c739a"" alt="""" width=""156"" height=""156""/></figure>



<h2>Introduction</h2>



<p>Resilience4j is a lightweight, easy-to-use fault tolerance library for Java 8 and functional programming. The Circuit Breaker is one of the main features provided by Resilience4j. It is used to stop cascading failures in a distributed system and provide fallback options.</p>



<p>To get started with Circuit Breaker in Resilience4j, you will need to add the resilience4j-circuit breaker dependency to your project. Once the dependency is added, you can create a CircuitBreaker instance and use it to decorate a function or method that you want to protect.</p>



<h2 id=""why-use-circuit-breaker""><strong>Why use Circuit Breaker?</strong></h2>



<p>Despite making investments to build a robust infrastructure, many IT organizations perpetuate dealing with database, hardware, and software downtime incidents at some point. Circuit breakers sanction the system to handle a few of these failures gracefully. It avails in averting cascading losses in an intricate distributed system and enables resilience in systems where failure is ineluctably foreordained by enabling fail expeditious and expeditious instauration.</p>



<p>There are many open-source libraries open for integrating the circuit breaker :</p>



<ul>
<li>Resilience4j</li>



<li>Netflix Hystrix</li>



<li>Sentinel by Alibaba</li>



<li>Failsafe</li>



<li>Service Mesh like Istio, Linkerd, Cilium, etc.</li>
</ul>



<h2 id=""how-a-circuit-breaker-works""><strong>How does the circuit breaker operate?</strong></h2>



<p>The circuit breaker pulls a function call inside the object of the circuit breaker, constantly monitoring the breakdowns.</p>



<p>When the failure reaches the threshold, the circuit breaker will trip and all other calls to the circuit breaker will return with an error, without the wrapped function being called.</p>



<figure class=""wp-block-image size-large is-style-rounded""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/GtqNcmp8/Screenshot-from-2023-01-16-20-03-28.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p>The circuit breaker, at any&nbsp;<strong>given</strong>&nbsp;time,&nbsp;<b>maybe</b>&nbsp;<strong>in</strong>&nbsp;any&nbsp;of the following states:</p>



<p><strong>CLOSED</strong>&#8211; It will be in the closed state and if the failures exceed the configured cut-off value at any time, the circuit will trip and move toward an open state.</p>



<p><strong>OPEN</strong> – It will be open when failures are saved and the threshold is reached, meaning calls will begin to fail quickly without performing function calls.</p>



<p><strong>HALF_OPEN – </strong>Breaker does not perform enveloped function calls when OPEN. After the waiting time has elapsed, it performs a status transition from OPEN to HALF_OPEN and allows only a configurable number of calls. Additional calls are dismissed until all authorized calls are completed. If the failure or slow call rate is higher than or equal to the configured threshold, the status becomes OPEN again. If the failure and slow call rates are below the threshold, the status will move to CLOSED.</p>



<h2 id=""why-resilience4j""><strong>Why Resilience4j?</strong></h2>



<p>The most popular framework that takes care of resilience is Hystrix, and unfortunately, Hystrix is in maintenance mode. Resilience4j is an alternative, lightweight, fault-tolerant library inspired by Netflix Hystrix and designed for Java 8 and functional programming. It is built on top of Vavr, a functional language extension for Java 8 that has no other external library dependencies.</p>



<p>Resilience4j provides higher-order functions (decorators) to extend any functional interface, method reference, or lambda expression. More than one decorator can be stacked on each functional interface, lambda expression, or method reference. The advantage is that you have the possibility to select only the decorators you need.</p>



<h2 id=""implementation""><strong>Implementation</strong></h2>



<p>Resilience4j delivers assets for different build tools such as Maven and Gradle. In our case, we use Maven for implementation.</p>



<pre class=""wp-block-code has-black-color has-text-color has-background has-small-font-size"" style=""background:radial-gradient(rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%)""><code>    &lt;dependency&gt;

            &lt;groupId&gt;io.github.resilience4j&lt;/groupId&gt;

            &lt;artifactId&gt;resilience4j-circuitbreaker&lt;/artifactId&gt;

            &lt;version&gt;${resilience4j.version}&lt;/version&gt;

     &lt;/dependency&gt;</code></pre>



<p>In Java, we need to define a custom circuit breaker configuration as shown below:</p>



<pre class=""wp-block-code has-black-color has-text-color has-background has-small-font-size"" style=""background:linear-gradient(90deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%)""><code>CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()
  
  .failureRateThresold(100)

  .slowCallRateThresold(100)

  .waitDurationInOpenState(Duration.ofMillis(1000))

  .slowCallDurationThreshold(Duration.ofSeconds(3))

  .permittedNumberOfCallsInHalfOpenState(4))

  .minimumNumberOfCalls(10)

  .slidingWindowType(SlidingwindowType.TIME_BASED)

  .slideingWindowSize(5)

  .recordExceptions(IOException.class, TimeoutException.class)

  .build();</code></pre>



<p>A circuit breaker registry can be created using the custom global configuration as shown in the figure :</p>



<pre class=""wp-block-code has-black-color has-pale-ocean-gradient-background has-text-color has-background has-small-font-size""><code>CircuitBreakerregistry cktBreakerRegistry = 

                CircuitBreakerregistry.of(circuitBreakerConfig);</code></pre>



<p>Decoration of a protected function to be controlled by a circuit breaker can be done as follows:</p>



<pre class=""wp-block-code has-black-color has-text-color has-background has-small-font-size"" style=""background:radial-gradient(rgba(121,219,180,0.01) 0%,rgb(0,208,130) 100%)""><code><strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">final</mark></strong> Optional&lt;CircuitBreaker&gt; circuitBreaker =
 
 CircuitBreakerHttpClientFactory
               .getCircuitBreakerInstance(CircuitBreakerGatewayAdapterFactory.getAdapterService(className),cktBreakerRegistry);

<strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">if</mark></strong>(circuitBreaker.isPresent()) {
   
    <strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">final</mark></strong> Supplier&lt;T&gt; supplier = CircuitBreaker.decorateSupplier(circuitBreaker.get(),
  
          () -&gt; <strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">this</mark></strong>.sendMessage(httpMethod, url, queryParams, headers, requestBody, responseClass));

    <strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">final</mark></strong> Try&lt;T&gt; result = Try.ofSupplier(supplier);
    
    <strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">return</mark></strong> result.get();

}

<em>//This is used to develop HTTP calls for other microservices</em>
<em>
</em><strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">return</mark></strong> <strong><mark style=""background-color:rgba(0, 0, 0, 0)"" class=""has-inline-color has-luminous-vivid-amber-color"">this</mark></strong>.sendMessage(httpmethod, url, queryParams, headers, requestBody, responseClass); </code></pre>



<p>Resilience4j also supports a module for micrometers to monitor systems such as InfluxDB or Prometheus.</p>



<pre class=""wp-block-code has-black-color has-text-color has-background has-small-font-size"" style=""background:linear-gradient(360deg,rgba(7,146,227,0.08) 0%,rgb(155,81,224) 100%)""><code>     &lt;dependency&gt;

            &lt;groupId&gt;io.micrometer&lt;/groupId&gt;
            
            &lt;artifactId&gt;micrometer-registry-influx&lt;/artifactId&gt;
           
            &lt;version&gt;${micrometer-registry-influx.version}&lt;/version&gt;
    
     &lt;/dependency&gt;

     &lt;dependency&gt;

            &lt;groupId&gt;io.github.resilience4j&lt;/groupId&gt;

            &lt;artifactId&gt;resilience4j-micrometer&lt;/artifactId&gt;

            &lt;version&gt;${resilience4j-micrometer.version}&lt;/version&gt;

     &lt;/dependency&gt;</code></pre>



<p>The metrics dashboard can be configured based on data requirements. There are several features that it supports out of the box</p>



<ul>
<li>State of the circuit breaker</li>



<li>Failure call rates</li>



<li>Slow call rates</li>



<li>Not permitted calls </li>
</ul>



<p>Here is an example of how to create a CircuitBreaker instance and use it to decorate a function:</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/wBPC19Kt/Screenshot-from-2023-01-18-13-50-25.png?w=640&#038;ssl=1"" alt="""" data-recalc-dims=""1""/></figure>



<p>Once the circuit breaker is created and decorated, it will automatically track the success and failure rate of the protected function and open the circuit if the failure rate exceeds the specified threshold. When the circuit is open, the protected function will not be executed and the fallback function will be executed instead.</p>



<p>You can also use the CircuitBreaker instance to check the state of the circuit, and its metrics of it, for example, the number of failures, successes, and calls.</p>



<p>This is just a basic example, you can further customize the CircuitBreaker by configuring the wait duration before closing the circuit, and the ring buffer size, among other things.</p>



<h2>Summary</h2>



<p>In this blog, we have discussed how introducing the circuit breaker into the system can help ensure high service availability. We also briefly discussed how the circuit breaker pattern gracefully handles failures and slowdowns of key services and helps those services recover by reducing the load.</p>



<h2>References</h2>



<ol>
<li><a href=""https://resilience4j.readme.io/docs/circuitbreaker"">https://resilience4j.readme.io/docs/circuitbreaker</a></li>



<li><a href=""https://reflectoring.io/circuitbreaker-with-resilience4j/"">https://reflectoring.io/circuitbreaker-with-resilience4j/</a></li>
</ol>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction Resilience4j is a lightweight, easy-to-use fault tolerance library for Java 8 and functional programming. The Circuit Breaker is one of the main features provided by Resilience4j. It is used to stop cascading failures in a distributed system and provide fallback options. To get started with Circuit Breaker in Resilience4j, you will need to add the resilience4j-circuit breaker dependency to your project. Once the dependency <a href=""https://blog.knoldus.com/resilience4j-getting-started-with-circuit-breaker/"" class=""more-link"">Continue Reading</a></p>
",Resilience4j: Getting Started with Circuit Breaker - Knoldus Blogs,"Resilience4j: The most popular framework that takes care of resilience is Hystrix, and unfortunately, Hystrix is in maintenance mode.",Shashikant Tanti,"[['Circuit Breaker', 'resilience4j']]",[['Java']]
189062,2023-02-27 11:43:38,https://blog.knoldus.com/reactive-programming-101-understanding-the-basics-with-an-example/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p>Reactive programming is a programming paradigm that focuses on events and dataflows in order to create applications that are responsive, resilient, and scalable. In this article, we&#8217;ll explore the basics of reactive programming with an example so you can get a better understanding of how it works.</p>



<h2>Introduction to Reactive Programming</h2>



<p>it&#8217;s a declarative programming paradigm concerned with data streams and the propagation of change. This means that when data in a given stream changes, all observers of that stream are notified. Observers can then react to these changes.</p>



<p>it&#8217;s is often used for event handling, as well as for composing asynchronous and concurrent programs. It can help make code more readable and maintainable, as well as improve performance by making better use of resources.</p>



<p>In this article, we&#8217;ll take a look at reactive prog by way of an example. We&#8217;ll build a simple app that displays a list of articles from an RSS feed. As new articles are added to the feed, our app will automatically update to reflect these changes.</p>



<h2>What are the Benefits of Reactive Programming?</h2>



<p>it&#8217;s a coding style that deals with asynchronous data streams and allows for event-driven programming. It can be used to build fast, scalable, and maintainable applications.</p>



<p>Some benefits of reactive prog include:</p>



<ol>
<li>improved performance;</li>



<li>better code clarity and organization;</li>



<li>more robust error handling;</li>



<li>easier functional composition; and</li>



<li>greater flexibility in terms of libraries and frameworks</li>
</ol>



<h3>What is an Example of Reactive Programming?</h3>



<p>In simple terms, reactive programming is a declarative programming paradigm that uses an asynchronous data stream and pub-sub system to establish communication between the producer and consumer. This approach is different from the traditional way of thinking, where we start with a certain action and then move on to other things. In reactive, however, everything revolves around the data stream.</p>



<p>Now let&#8217;s take a look at an example to understand this concept better. Let&#8217;s say you are building a chat application using the traditional method. You would start by creating a user interface, followed by adding code for the various features like messaging, file sharing, etc. Once all of that is done, you would then focus on making sure that the application can scale as more users join in.</p>



<p>With reactive prog, however, your focus would be on the data stream first and foremost. So in our chat application example, we would start by defining what kind of data we need (i.e., messages) and how it should flow between users (i.e., via a pub-sub system). Once that is set up, we can then move on to building the user interface and adding code for various features. And since everything is centered around the data stream, it becomes much easier to scale the application as needed.</p>



<h2>Understanding the Concepts of Reactive Programming</h2>



<p>it is a declarative programming paradigm that uses an asynchronous data stream and functional programming to handle the propagation of changes. It is an approach to programming that is more responsive to user input and easier to manage when developing complex applications.</p>



<p>In order to understand reactive programming, we must first understand the concepts of data streams and functional programming. Data streams are sequences of data that can be processed as they are received. Functional programming is a style of coding in which the programmer defines what actions should be taken on a given input, rather than how those actions should be carried out. This allows for more concise and reliable code.</p>



<p>Now that we have a basic understanding of the concepts involved in reactive programming, let&#8217;s take a look at an example. Say we have a list of users and their corresponding status updates. We want to create a UI that displays the list of users and highlights the most recent status update for each user.</p>



<p>In order to do this, we first need to create a data stream from our list of users and their status updates. We can do this by using the RxJS library&#8217;s from() method:</p>



<pre class=""wp-block-code""><code>const userStream = RxJS.from(users);</code></pre>



<p>Once we have our data stream, we can map it to our UI elements using the map() operator:</p>



<pre class=""wp-block-code""><code>const userListItems = userStream.map(user =&gt; { return <code>&lt;li&gt;${user}&lt;/li&gt;</code> });</code></pre>



<p>Finally, we can</p>



<h4>Overview of Popular Libraries Used with Reactive Programming</h4>



<p>Reactive programming is a programming paradigm that is built around the idea of reacting to events. This means that instead of waiting for an event to happen, the program will be constantly checking for events and then reacting to them. This can be done either synchronously or asynchronously.</p>



<p>There are many different libraries that can be used with reactive programming. The most popular ones are RxJava, RxJS, and Bacon.js. These libraries all have their own strengths and weaknesses, so it&#8217;s important to choose the one that will best fit your needs.</p>



<p>RxJava is a Java-based library that is designed for use with reactive programming. It has a wide range of features, including support for backpressure and operators that allow you to manipulate data streams. However, it can be difficult to learn and use, so it might not be the best choice for beginners.</p>



<p>RxJS is a JavaScript-based library that is also designed for use with reactive programming. It has many of the same features as RxJava, but it is much easier to learn and use. This makes it a good choice for people who are new to reactive programming.</p>



<p>Bacon.js is another JavaScript-based library that can be used with reactive programming. It has many of the same features as RxJS, but it also includes some additional features, such as support for functional reactive programming and animation.</p>



<h2>Tips and Tricks for Getting Started With Reactive Programming</h2>



<p>If you&#8217;re new to reactive programming, you might be wondering where to start. Here are some tips and tricks for getting started with reactive programming, using a simple example.</p>



<ol>
<li>Start by understanding the basics of reactive programming. What is it? What are its benefits? How does it work?</li>



<li>Once you have a good understanding of the basics, try out a few simple examples. This will help you get a feel for how reactive programming works in practice.</li>



<li>Once you&#8217;re comfortable with the basics, dive deeper into specific topics that interest you. There&#8217;s a lot to learn about reactive programming, so there&#8217;s no need to try and learn everything at once. Just focus on one thing at a time, and build up your knowledge gradually.</li>



<li>Finally, keep up with the latest developments in reactive programming. This field is constantly evolving, so there&#8217;s always something new to learn. By staying up-to-date, you&#8217;ll be able to make the most of this powerful tool</li>
</ol>



<h2>Conclusion</h2>



<p>Reactive programming is a powerful tool for developing applications with a highly responsive user interface. We hope this article has given you an introduction to the core concepts of reactive programming, as well as an example of how they can be applied in practice. With its ability to simplify complex event-driven architectures and make your code more maintainable, it’s no wonder that many developers are turning to reactive prog for their projects. If you’re ready to dive deeper into the world of reactive prog, try out some tutorials and see what all the hype is about!</p>



<p><a href=""https://blog.knoldus.com/basics-of-reactive-programming/#:~:text=what%20it%20is.-,What%20is%20Reactive%20Programming%3F,dealt%20with%20in%20reactive%20programming."">read more</a> <a href=""https://en.wikipedia.org/wiki/Reactive_programming"">-&gt;</a></p>



<p></p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Reactive programming is a programming paradigm that focuses on events and dataflows in order to create applications that are responsive, resilient, and scalable. In this article, we&#8217;ll explore the basics of reactive programming with an example so you can get a better understanding of how it works. Introduction to Reactive Programming it&#8217;s a declarative programming paradigm concerned with data streams and the propagation of change. <a href=""https://blog.knoldus.com/reactive-programming-101-understanding-the-basics-with-an-example/"" class=""more-link"">Continue Reading</a></p>
",what is Reactive programming,Reactive programming is a programming paradigm that focuses on events and dataflows in order to create applications.,Akshit Kumar,"[['java', 'Reactive Programming']]",[['Studio-Scala']]
190832,2023-02-23 10:07:16,https://blog.knoldus.com/twitter-finagle-ecosystem/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p class=""has-text-align-center""><img decoding=""async"" src=""https://lh3.googleusercontent.com/wYm88I_PqxfVPeu06Kbran7-JBys6DNz1rWbLcYoY_GFv9XCnfIr3VvwlRzo3jKYkDp4BItyB3W8Ksz9Dsf-CWyz-chR_qIDJE1UJ9Vyf-mFo0D8PnGo6sc3blVjlaBKyArNqZxeMdhguc7KwMOoPfE"" width=""374"" height=""267""></p>



<p>In this blog, we will learn about the very basics of the Twitter Finagle Ecosystem and see how it is used in Twitter.</p>



<p>In order to create high-concurrency servers and clients in Scala, developers leverage the open-source, asynchronous, protocol-neutral RPC framework known as Twitter Finagle. Hence, to manage the enormous traffic and size that Twitter required to serve, it was created by Twitter. The entire ecosystem of Finagle&#8217;s tools and libraries comes together to form a potent framework for creating distributed systems. In this post, we&#8217;ll examine the Finagle ecosystem&#8217;s many elements in more detail.</p>



<h2>Architecture</h2>



<p>Finagle is built on the foundation of Netty, a high-performance network application framework. It uses Netty&#8217;s NIO (non-blocking IO) features to provide a scalable and efficient networking stack. Finagle&#8217;s architecture is based on service-oriented architecture (SOA) principles. Services are defined as functions that take a request and return a response. Likewise, these services are then composed into complex systems.</p>



<p>The architecture of Twitter Finagle can be broken down into three main components:</p>



<ol>
<li><strong>Finagle Core:</strong> Firstly, this is the core library that provides the basic abstractions for building distributed systems. It includes modules for managing connections, load balancing, service composition, and retry logic.</li>



<li><strong>Protocol Support:</strong> Finagle supports a variety of protocols including HTTP, Thrift, Memcached, and Finagle&#8217;s own custom protocol. Hence, each protocol has its own set of codecs and serializers that are used to encode and decode data.</li>



<li><strong>Integrations:</strong> Finagle integrates with a variety of third-party tools and frameworks such as Zipkin, a distributed tracing system, and Ostrich, a service monitoring system.  Finally, these integrations provide additional functionality for building and monitoring distributed systems.</li>
</ol>



<p>Overall, the architecture of Twitter Finagle is designed to be modular and extensible, allowing developers to build and deploy complex distributed systems with ease.</p>



<p><img decoding=""async"" src=""https://lh3.googleusercontent.com/L09Qmv1sF3x_mk9HgD5GgRPaAWSlg45nO_M8OB0xgMfAmHpYlfOuPKpRA3Nn4_FDCvmRZWPU1-6XvXnJizqhrGEVp1FrXYP3WLEi98d5WXZLlu8kNBA66WS9pUXMxlR7zVzS3y_DkQD8uvTrjg6-hrs"" width=""777"" height=""490""></p>



<h2>Components of Twitter Finagle</h2>



<p>Finagle is composed of several components that work together to provide a complete ecosystem for building distributed systems.</p>



<ol>
<li><strong>Finagle Core</strong>: Firstly, The core of Finagle provides the basic building blocks for building RPC systems. It includes support for HTTP, Thrift, and other protocols. It also provides a robust set of tools for handling errors and managing network connections.</li>



<li><strong>Finagle Clients:</strong> Finagle clients provide a simple API for making remote procedure calls. Clients are protocol-agnostic, which means that they can be used with any protocol that Finagle supports. Clients also include support for load balancing and failover.</li>



<li><strong>Finagle Servers:</strong> Finagle servers provide a simple API for building high-concurrency servers. Like clients, servers are protocol-agnostic, which means that they can be used with any protocol that Finagle supports. Servers also include support for load balancing and failover.</li>



<li><strong>Finagle Load Balancers:</strong> Finagle includes a set of load balancers that can be used to distribute traffic across multiple servers. Load balancers can be configured to use different load balancing algorithms, such as round-robin or weighted round-robin.</li>



<li><strong>Finagle Filters:</strong> Finagle filters provide a way to add functionality to Finagle services. Filters can be used to add metrics, logging, or authentication to a service. Filters can also be composed to create complex functionality.</li>



<li><strong>Finatra</strong>: Finatra is a web framework built on top of Finagle. furthermore, it provides a set of tools and libraries for building RESTful APIs. Finatra includes support for features like request routing, JSON serialization, and dependency injection.
<ul>
<li></li>
</ul>
</li>
</ol>



<h2>Benefits of Twitter Finagle</h2>



<p>Finagle provides several benefits for building distributed systems:</p>



<ol>
<li><strong>Scalability:</strong> Finagle&#8217;s architecture is designed to provide scalability. Additionally, its NIO-based networking stack allows it to handle large numbers of connections efficiently. Its support for load balancing and failover also makes it easy to scale up and down.</li>



<li><strong>Robustness:</strong> Finagle provides a robust set of tools for handling errors and managing network connections. Also, its support for retries and timeouts helps to ensure that requests are processed successfully. Its filters also provide a way to add additional error handling and monitoring.</li>



<li><strong>Flexibility:</strong> Finagle&#8217;s protocol-agnostic design allows it to be used with any protocol that it supports. This makes it easy to switch between protocols or add new protocols to a system.</li>
</ol>



<h2>Conclusion</h2>



<p>Twitter Finagle is a powerful ecosystem for building distributed systems in Scala. Its architecture is designed to provide scalability, robustness, and flexibility. Its components work together to provide a complete set of tools for building high-concurrency servers and clients. Finagle has been battle-tested at Twitter and is used by many other companies to build their distributed systems. If you are building a distributed system in Scala, Finagle is definitely worth considering.</p>



<p>For more information, you can visit Twitter Finagle Official <a href=""https://twitter.github.io/finagle/guide/"">Documentation</a>. </p>



<p>Love reading tech blogs? Visit <a href=""https://blog.knoldus.com/"">Knoldus Blogs</a> to get enriched with great tech content. </p>



<p><strong>Reference and credits</strong> &#8211; <a href=""https://blog.twitter.com"">Twitter Blogs</a></p>



<p class=""has-text-align-center""><a href=""https://www.knoldus.com/careers/""><img decoding=""async"" width=""776"" height=""562"" src=""https://lh3.googleusercontent.com/KG7Lrgzxr5mAJgSPKeBvGROOXh5J5Dxk-OfPqciz31aOpKlLgD0CCw3cGDkeGE_2cfs9INZ_whYH_zEbA1sv-vh1fKXbPzdzG6vaGi3ixknunTMvV8Lo4AxMRk3C1WBEmGrJIAROG1M1dLG0r4redw""></a></p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> In this blog, we will learn about the very basics of the Twitter Finagle Ecosystem and see how it is used in Twitter. In order to create high-concurrency servers and clients in Scala, developers leverage the open-source, asynchronous, protocol-neutral RPC framework known as Twitter Finagle. Hence, to manage the enormous traffic and size that Twitter required to serve, it was created by Twitter. The entire <a href=""https://blog.knoldus.com/twitter-finagle-ecosystem/"" class=""more-link"">Continue Reading</a></p>
",Twitter Finagle Ecosystem - Knoldus Blogs,New to Twitter Finagle? Dive into this blog to understand the very basics of Twitter Finagle and know more about its components etc.,Sakshi Mittal,[],[['Studio-Scala']]
189575,2023-02-22 15:01:32,https://blog.knoldus.com/introduction-to-spring-webclient/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<p class=""has-text-align-justify"">In Spring 5, Spring introduced a component in the new Web Reactive framework that helps to build reactive and non-blocking web applications. A common requirement in web applications is to make HTTP calls to other services. Before Spring 5, we were using RestTemplate as the primary technology for client-side HTTP access. Which was simple and always blocking web client, which is now in maintenance mode.</p>



<figure class=""wp-block-image size-large is-resized is-style-default""><img decoding=""async"" src=""https://i0.wp.com/i.postimg.cc/ZKXhpsCR/Untitled-presentation-1.jpg?resize=640%2C361&#038;ssl=1"" alt=""webclient-logo"" width=""640"" height=""361"" data-recalc-dims=""1"" /></figure>



<h2>Overview of WebClient</h2>



<p>In the Spring framework, the WebClient is a reactive, non-blocking client for HTTP requests. It is part of the Spring WebFlux module, which provides support for reactive programming in Spring. The WebClient provides a functional and flexible API for making HTTP requests, and it can be used for tasks such as consuming REST APIs, uploading data, and performing other web-related operations. It provides an API for making HTTP requests and processing the response asynchronously, without blocking the calling thread. This makes it suitable for developing reactive applications that require high performance and low latency.</p>



<p>WebClient supports common HTTP methods such as GET, POST, PUT, DELETE, and others. And can be used to call RESTful APIs or any other web services. It also provides features such as request and response manipulation, request chaining, and error handling. The solution offers support for both synchronous and asynchronous operations, making it suitable also for applications running on a Servlet Stack.</p>



<p>Let&#8217;s look at an example that demonstrate the working of Webclient.</p>



<h2>Dependency</h2>



<p>In order to use WebClient in our Spring Boot project, we need to add a dependency on the WebFlux library. Like any other Spring Boot dependency, we have to add a starter dependency, as&nbsp;<em><a href=""https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-webflux"" target=""_blank"" rel=""noreferrer noopener"">spring-boot-starter-webflux</a></em>&nbsp;module into the project.</p>



<pre class=""wp-block-code""><code><strong>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
&lt;/dependency&gt;</strong></code></pre>



<h2>Steps to work with Webclient</h2>



<ol>
<li>Create an instance</li>



<li>make a request</li>



<li>handle the response</li>
</ol>



<h2>Create an instance of Webclient</h2>



<p>There are three options to create webclient instance: </p>



<p><strong>Method-1</strong>: Let&#8217;s start with first one creating a&nbsp;<em>WebClient</em>&nbsp;object with default settings:</p>



<pre class=""wp-block-code""><code><strong>WebClient webClient = WebClient.create();</strong></code></pre>



<p><strong>Method-2:</strong> Alternatively, there is a more flexible way to create a web client instance by specifying the base URL of the service.</p>



<pre class=""wp-block-code""><code><strong>WebClient webClient = WebClient .create(""https://gorest.co.in/public/v2"");</strong></code></pre>



<p><strong>Method-3:</strong> The most flexible way of creating a WebClient instance is to use its own builder (WebClient.Builder) using DefaultWebClientBuilder class. It &nbsp;allows full customization on the client behavior as per our requirement.</p>



<pre class=""wp-block-code""><code><strong>WebClient</strong> <strong>webClient = WebClient.builder().baseUrl(""https://gorest.co.in/public/v2"") .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).build();</strong></code></pre>



<h2>Sending HTTP Requests and Handling API Response</h2>



<pre class=""wp-block-code""><code><strong>public Flux&lt;User&gt; getUsers() { </strong>
<strong>return webClient.get() .uri(""/users"") .retrieve().bodyToFlux(User.class); }</strong></code></pre>



<p>We have specified http GET request method and URI to call. We called retrieve() method to get a Response for the request.&nbsp;To read the response body, we need to get Mono/Flux for the content of the response.</p>



<p>If we want to get only response body then using methods retrieve() and then bodyToFlux() and bodyToMono() methods. for example we are using bodyToFlux(User.class) in our example.</p>



<figure class=""wp-block-image size-large""><a href=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?ssl=1""><img data-attachment-id=""170100"" data-permalink=""https://blog.knoldus.com/what-is-the-internet-of-thing-testing/image-95/"" data-orig-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=1403%2C1018&amp;ssl=1"" data-orig-size=""1403,1018"" data-comments-opened=""1"" data-image-meta=""{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}"" data-image-title=""image-95"" data-image-description="""" data-image-caption="""" data-medium-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=300%2C218&amp;ssl=1"" data-large-file=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?fit=640%2C464&amp;ssl=1"" decoding=""async"" width=""640"" height=""464"" src=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=640%2C464&#038;ssl=1"" alt="""" class=""wp-image-170100"" srcset=""https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=1024%2C743&amp;ssl=1 1024w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=300%2C218&amp;ssl=1 300w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?resize=768%2C557&amp;ssl=1 768w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1403&amp;ssl=1 1403w, https://i0.wp.com/blog.knoldus.com/wp-content/uploads/2022/05/image-95.png?w=1280&amp;ssl=1 1280w"" sizes=""(max-width: 640px) 100vw, 640px"" data-recalc-dims=""1"" /></a></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> In Spring 5, Spring introduced a component in the new Web Reactive framework that helps to build reactive and non-blocking web applications. A common requirement in web applications is to make HTTP calls to other services. Before Spring 5, we were using RestTemplate as the primary technology for client-side HTTP access. Which was simple and always blocking web client, which is now in maintenance mode. <a href=""https://blog.knoldus.com/introduction-to-spring-webclient/"" class=""more-link"">Continue Reading</a></p>
",Introduction to Spring WebClient - Knoldus Blogs,"In Spring 5, Spring introduced a component called WebClient in the new Web Reactive framework that helps to build reactive and non-blocking web applications. A common requirement in web applications is to make HTTP calls to other services. Before Spring 5, we were using RestTemplate as the primary technology for client-side HTTP access. Which was simple and always blocking, which is now in maintenance mode.",Aasif Ali,[],[['Java']]
190105,2023-02-21 10:12:03,https://blog.knoldus.com/how-to-use-zio-dynamodb-wrapper/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<h2>What is Zio</h2>



<p>ZIO is a library for Scala programming language that provides a pure, composable, and type-safe approach to error handling and asynchronous programming. ZIO provides a lot of tools for developers to write applications in a clean, concise, and functional manner. Zlayer is a module in ZIO that provides abstractions for building and composing modular applications.</p>



<p>In this blog, we will be exploring the ZioDynamoDB wrapper.</p>



<figure class=""wp-block-image size-large""><img decoding=""async"" src=""https://www.google.com/url?sa=i&amp;url=https%3A%2F%2Fgithub.com%2Faparo%2Fawesome-zio&amp;psig=AOvVaw01S_2InjKgXMjrl76KSj1j&amp;ust=1677039926735000&amp;source=images&amp;cd=vfe&amp;ved=0CBAQjRxqFwoTCNjQj9zipf0CFQAAAAAdAAAAABAi"" alt=""""/></figure>



<h2>What is DynamoDB</h2>



<p>DynamoDB uses a NoSQL database model, which is nonrelational, allowing documents, graphs, and columnar among its data models. A user stores data in DynamoDB tables, then interact with it via GET and PUT queries, which are read and write operations, respectively. DynamoDB supports basic CRUD operations and conditional operations. Each DynamoDB query is executed by a primary key identified by the user, which uniquely identifies each item.</p>



<p></p>



<h2>How To Use Zio DynamoDB wrapper</h2>



<ul>
<li>Add the Required Library Dependency</li>



<li>Create a Connection</li>



<li>Create a function to Insert DynamoDb Record</li>
</ul>



<p><strong>Add the Library Dependency:</strong></p>



<pre class=""wp-block-code""><code>libraryDependencies ++= Seq(
  ""dev.zio"" %% ""zio-dynamodb"" % ""0.2.0-RC2""
)</code></pre>



<p><strong>Create a Connection:</strong></p>



<p>So in Zio, we can create an Async in Zio and pick the configurations from the application.conf file or we can use the default configuration in the system.</p>



<pre class=""wp-block-code""><code>//Create an Async Connection
val client = DynamoDbAsyncClient
   .builder()
   .region(Region.US_EAST_1)
   .build()</code></pre>



<p>The client here is an Async Client and It will get the AWS credentials from the application.conf file.</p>



<pre class=""wp-block-code""><code>//Pick the Default Configuration
Inputfunction.provide(
   netty.NettyHttpClient.default,
   config.AwsConfig.default,
   dynamodb.DynamoDb.live,
   DynamoDBExecutor.live
 )</code></pre>



<p>Here the <strong>.provide</strong> function will provide a Layer to the specific function to which we apply the function on. Here the <strong>InputFunction</strong> will get the layer with <strong>DynamoDBExecutor.live</strong> which will access the DynamoDb service which in turn requires the layer <strong>dynamodb.DynamoDb.live</strong> layer to get the AWS config, which accesses the <strong>config.AwsConfig.default</strong> to get the default AWS configuration from the system which requires an HTTP client and here we have <strong>netty.NettyHttpClient.default</strong>.</p>



<p><strong>Function To Insert Dynamo Db Record</strong></p>



<pre class=""wp-block-code""><code>case class TransactionDetails(userDetails: String, status: String)  

private object TransactionDetails {
    implicit lazy val schema: Schema&#91;TransactionDetails] = DeriveSchema.gen&#91;TransactionDetails]
  }
    
private def InputFunction(transactionDetails: TransactionDetails): ZIO&#91;DynamoDBExecutor, Throwable, Unit] = {
    val input: TransactionDetails = TransactionDetails(transactionDetails.userDetails, transactionDetails.status)
    for {
      _ &lt;- put(""newTable"", input).execute
      bookingDetailsSuccess &lt;- get&#91;TransactionDetails](""newTable"", PrimaryKey(""status"" -&gt; ""success"")).execute
      bookingDetailsFail &lt;- get&#91;TransactionDetails](""newTable"", PrimaryKey(""status"" -&gt; ""fail"")).execute
      _ &lt;- zio.Console.printLine(s""Inputted Data $bookingDetailsSuccess"")
      _ &lt;- zio.Console.printLine(s""Inputted Data $bookingDetailsFail"")
    } yield ()
  }</code></pre>



<p></p>



<h2>Conclusion:</h2>



<p>The Zio DynamoDB Library makes It much easier to persist data with fewer lines of code than in Java or Scala. To read more about What is a Dynamo DB you can access this link here: </p>



<pre class=""wp-block-preformatted""><a href=""https://blog.knoldus.com/amazon-dynamodb-core-components/"">DynamoDB Core Concepts</a>
<a href=""https://blog.knoldus.com/a-simple-introduction-to-amazon-dynamodb/"">DynamoDB 5 Minute Read</a></pre>



<p>Also If you wish to learn more about ZIO DynamoDB you can access the youtube video here:</p>



<figure class=""wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio""><div class=""wp-block-embed__wrapper"">
<span class=""embed-youtube"" style=""text-align:center; display: block;""><iframe class=""youtube-player"" width=""640"" height=""360"" src=""https://www.youtube.com/embed/f68-69eA8Vc?version=3&#038;rel=1&#038;showsearch=0&#038;showinfo=1&#038;iv_load_policy=1&#038;fs=1&#038;hl=en-US&#038;autohide=2&#038;wmode=transparent"" allowfullscreen=""true"" style=""border:0;"" sandbox=""allow-scripts allow-same-origin allow-popups allow-presentation""></iframe></span>
</div></figure>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">2</span> <span class=""rt-label rt-postfix"">minutes</span></span> What is Zio ZIO is a library for Scala programming language that provides a pure, composable, and type-safe approach to error handling and asynchronous programming. ZIO provides a lot of tools for developers to write applications in a clean, concise, and functional manner. Zlayer is a module in ZIO that provides abstractions for building and composing modular applications. In this blog, we will be exploring <a href=""https://blog.knoldus.com/how-to-use-zio-dynamodb-wrapper/"" class=""more-link"">Continue Reading</a></p>
",How To Use Zio DynamoDB wrapper - Knoldus Blogs,"Reading Time: 2 minutes What is Zio ZIO is a library for Scala programming language that provides a pure, composable, and type-safe approach to error handling and asynchronous programming. ZIO provides a lot of tools for developers to write applications in a clean, concise, and functional manner. Zlayer is a module in ZIO that provides abstractions for building and composing modular applications. In this blog, we will be exploring Continue Reading",Shubham,[],[['Studio-Scala']]
189312,2023-02-21 10:10:04,https://blog.knoldus.com/zio-streaming-applications-transformation-and-error-handling/,"<span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span>
<h2>Introduction to Streaming </h2>



<p>Why do we really need streaming? We can understand the same with the following example.</p>



<p>Suppose we have a list of integers and we want to get all the prime numbers and do some further computation on that. In the typical application, we will use <strong>ZIO.foreachParN</strong> </p>



<p>But when we are using the above method we will have two problems:- </p>



<p><strong>One Is High Latency:-</strong> Here we need to wait for the entire list to get processed first then it will jump to the next step of processing. As the list size increases the latency will be increased.</p>



<p><strong>Second is Memory:-</strong> We need to keep the entire list in memory as we process it and this doesn&#8217;t work if we are working with an infinite data stream.</p>



<p>The solution is Zio Stream. In-stream we can create the stream of the same integers and take the integer one by one do the first task and then the second task followed by the first no need to wait for the entire list to get completed. We can run the stream in parallel using <strong>ZStream.fromIterable(numbers)<br>.mapMParUnordered(20)</strong>. here we can process 20 elements at a time to achieve parallelism. </p>



<p></p>



<h2>Creating Stream</h2>



<p>There are multiple ways to create a Stream. We can create a stream from Kafka input, for local testing, etc.</p>



<p>We can create the stream using the range, from an iterable sequence, infinite stream, and finite stream, for testing using a schedule that will create elements after a fixed interval. all the stream creation methods are covered in the following code snipped.</p>



<pre class=""wp-block-code""><code>  val finiteStream = ZStream.range(1, 20)

  val iterStream = ZStream.fromIterable(List(1,2,3,4,5,6))

  val infiniteStream= ZStream.iterate(1)(_+1)

  val scheduledStream= ZStream(1).schedule(Schedule.forever)

  val intervalStream = 
ZStream.repeatWithSchedule(4,Schedule.spaced(100.millisecond))

  val fromZioStream = ZStream.fromZIO(readLine)
</code></pre>



<h2>Stream Operations</h2>



<p>In this section, we will learn about the useful operation which we can perform on the zio stream.</p>



<p><strong>Tapping</strong></p>



<p>The&nbsp;<code>tap</code>&nbsp;the function does not change elements of the stream, it does not affect the return type of the stream. It is used to print the debug message or current content of the stream basically to track what is going on at current steps.</p>



<pre class=""wp-block-code""><code>object tap extends ZIOAppDefault{
  override def run: ZIO&#91;Any with ZIOAppArgs with Scope, Any, Any] = myApp

  val myApp = ZStream.fromIterable(1 to 6)
    .tap(before =&gt; Console.printLine(before))
    .map(elem =&gt; elem + 100)
    .tap(now =&gt; Console.printLine(now))
    .runDrain
}</code></pre>



<p>In the above set of code, we can see the initial element of the stream using the tap method then we are adding 100 to each element and then we are printing the same on the console using the same.</p>



<p></p>



<p><strong>Taking Elements</strong></p>



<p>Suppose we want to take certain elements of stream based on some condition, starting some element. we can use functions like .take method .takewhile or. takeUntil etc.</p>



<pre class=""wp-block-code""><code>stream.take(5), stream.takeWhile(_ &lt; 5), stream.takeUntil(_ == 5) </code></pre>



<p><strong>Mapping</strong></p>



<p><strong>map</strong> <strong>function</strong>&nbsp;— It transforms one zio stream into another zio stream. </p>



<p></p>



<pre class=""wp-block-code""><code>val intStream = ZStream(""1"", ""2"", ""3"", ""4"")
intStream.map(_.toString)</code></pre>



<p><strong>mapMPar</strong>&nbsp;— It is similar to&nbsp;<code>mapM</code>, but will evaluate effects in parallel.</p>



<p></p>



<p><strong>Filtering</strong></p>



<p>The&nbsp;<code>ZStream.filter</code>&nbsp;allows us to filter emitted elements: </p>



<pre class=""wp-block-code""><code>ZStream.range(1, 11).filter(_ % 2 == 0)</code></pre>



<p><strong>Draining</strong></p>



<p>sometimes we might want to execute its effect without emitting any element, in these situations to discard the results we should use the&nbsp;<code>ZStream.drain</code>&nbsp;method. It removes all output values from the zio stream:-</p>



<p>ZStream(1, 2, 3, 4, 5).tap(k =&gt; Console.<em>printLine</em>(k+3)).drain</p>



<pre class=""wp-block-code""><code>object emit extends ZIOAppDefault {
  val s1 = ZStream.fromIterable(1 to 20)
  val s2 = s1.tap(k =&gt; Console.printLine(k+3)).runDrain

  override def run: ZIO&#91;Any with ZIOAppArgs with Scope, Any, Any] = s2
}</code></pre>



<p>it won&#8217;t emit any element, but as it executes the intermediate step it will print the elements as a part of the tap operation.</p>



<p></p>



<p><strong>Partition</strong></p>



<p>We can split the zio stream based on the boolean condition using the partition function over the stream. We can split the odd and even number stream in the following manner. </p>



<pre class=""wp-block-code""><code>val partionStreams: ZManaged&#91;Any, Nothing, (ZStream&#91;Any, Nothing, Int], ZStream&#91;Any, Nothing, Int])]= ZStream.fromIterable(0 to 100).partition(_ % 2 == 0)</code></pre>



<p><strong>Grouping</strong></p>



<p>In this section, we will learn how we can group the events based on chunk size or time.</p>



<p>We can group the event based on the chunk size as follows:- </p>



<p>ZStream.fromIterable(0 to 8).grouped(3)</p>



<p>We can group the event by time and chunk size together whichever condition satisfies first as follow:-</p>



<p>ZStream.fromIterable(0 to 10).repeat(Schedule.spaced(1.seconds)).groupedWithin(30, 10.seconds)</p>



<pre class=""wp-block-code""><code>object grouping extends ZIOAppDefault {
  def run =
    ZStream
      .fromIterable('a' to 'z')
      .schedule(Schedule.spaced(100.millis))
      .groupedWithin(1000, 600.millisecond).map{k =&gt; k.zipWithIndex}
      .debug
      .runDrain
}

</code></pre>



<h2>Error Handling</h2>



<p><strong>orElse</strong>:-  If we have a stream it may fail in that case we might have to recover from failure or run another stream. We can prove the fallback stream using the orElse method.</p>



<p>val s1 = ZStream(1, 2, 3) ++ ZStream.fail(&#8220;Oh! Error!&#8221;) ++ ZStream(4, 5)<br>val s2 = ZStream(7, 8, 9)</p>



<p><br>val stream = s1.orElse(s2)</p>



<p></p>



<p><strong>catchAll</strong>:- We have another method catchAll which is more powerful than orElse, in this method we can decide based on the type of failure and provide the fallback stream.</p>



<p></p>



<pre class=""wp-block-code""><code>val Stream =ZStream(1, 2, 3) ++ZStream.fail(""Odd Num!"") ++ZStream(4, 5) ++ZStream.fail(""Even Num"")

val evenStream = ZStream(2,4,6, 8)
val oddStream = ZStream(1,3,5,7)

val resultStream= Stream.catchAll{
  case ""Odd Num!""  =&gt; oddStream
  case ""Even Num!"" =&gt; evenStream
}</code></pre>



<p><strong>onError</strong>:- If our stream encounters an error, we can do some cleanup activity or print some failure message on the console for debugging process.</p>



<pre class=""wp-block-code""><code>val stream = 
  (ZStream(1, 2, 3) ++ ZStream.dieMessage(""Oh! Boom!"") ++ ZStream(4, 5))
    .onError(_ =&gt; putStrLn(""Stream application closed! We are doing some cleanup jobs."").orDie)</code></pre>



<p><strong>Retrying:-</strong>  When a stream fails during some operation we can retry after a certain interval using the <strong>.retry</strong> method.</p>



<pre class=""wp-block-code""><code>        AWSSinkService
          .uploadService(configReader.S3_BASE_BUCKET, key, chunkOfBytes)
          .tapError(ex =&gt; ZIO(logger.error(""Exception : "" + ex.getMessage)))
          .<strong>retry(zio.Schedule.exponential(10.second))</strong></code></pre>



<p></p>



<p></p>



<h2>Conclusion</h2>



<p>In this blog, we have learned why we need streaming its use cases. How we can create the dummy stream and what is the operation available on a stream. How we can handle the failure case retry and use a fallback. </p>



<p>In the subsequent blog, we will be learning how we can run the stream in a microservice merged with two streams and some production-level use cases.</p>
","<p><span class=""rt-reading-time"" style=""display: block;""><span class=""rt-label rt-prefix"">Reading Time: </span> <span class=""rt-time"">4</span> <span class=""rt-label rt-postfix"">minutes</span></span> Introduction to Streaming Why do we really need streaming? We can understand the same with the following example. Suppose we have a list of integers and we want to get all the prime numbers and do some further computation on that. In the typical application, we will use ZIO.foreachParN But when we are using the above method we will have two problems:- One Is High <a href=""https://blog.knoldus.com/zio-streaming-applications-transformation-and-error-handling/"" class=""more-link"">Continue Reading</a></p>
","ZIO Streaming Applications, Transformation, and Error Handling - Knoldus Blogs","Reading Time: 4 minutes Introduction to Streaming Why do we really need streaming? We can understand the same with the following example. Suppose we have a list of integers and we want to get all the prime numbers and do some further computation on that. In the typical application, we will use ZIO.foreachParN But when we are using the above method we will have two problems:- One Is High Continue Reading",Amit Kumar,[['scala']],[['Studio-Scala']]